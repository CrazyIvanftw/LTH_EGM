// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace lth.egmTest {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Test {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_lth_egmTest_Header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.egmTest.Header, global::lth.egmTest.Header.Builder> internal__static_lth_egmTest_Header__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_lth_egmTest_Body__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.egmTest.Body, global::lth.egmTest.Body.Builder> internal__static_lth_egmTest_Body__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_lth_egmTest_Packet__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.egmTest.Packet, global::lth.egmTest.Packet.Builder> internal__static_lth_egmTest_Packet__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Test() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp0ZXN0LnByb3RvEgtsdGguZWdtVGVzdCIYCgZIZWFkZXISDgoGc2VuZGVy", 
            "GAEgAigFIhMKBEJvZHkSCwoDbXNnGAEgAigJIk4KBlBhY2tldBIjCgZoZWFk", 
            "ZXIYASACKAsyEy5sdGguZWdtVGVzdC5IZWFkZXISHwoEYm9keRgCIAIoCzIR", 
          "Lmx0aC5lZ21UZXN0LkJvZHk="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_lth_egmTest_Header__Descriptor = Descriptor.MessageTypes[0];
        internal__static_lth_egmTest_Header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.egmTest.Header, global::lth.egmTest.Header.Builder>(internal__static_lth_egmTest_Header__Descriptor,
                new string[] { "Sender", });
        internal__static_lth_egmTest_Body__Descriptor = Descriptor.MessageTypes[1];
        internal__static_lth_egmTest_Body__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.egmTest.Body, global::lth.egmTest.Body.Builder>(internal__static_lth_egmTest_Body__Descriptor,
                new string[] { "Msg", });
        internal__static_lth_egmTest_Packet__Descriptor = Descriptor.MessageTypes[2];
        internal__static_lth_egmTest_Packet__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.egmTest.Packet, global::lth.egmTest.Packet.Builder>(internal__static_lth_egmTest_Packet__Descriptor,
                new string[] { "Header", "Body", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Header : pb::GeneratedMessage<Header, Header.Builder> {
    private Header() { }
    private static readonly Header defaultInstance = new Header().MakeReadOnly();
    private static readonly string[] _headerFieldNames = new string[] { "sender" };
    private static readonly uint[] _headerFieldTags = new uint[] { 8 };
    public static Header DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Header DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Header ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.egmTest.Test.internal__static_lth_egmTest_Header__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Header, Header.Builder> InternalFieldAccessors {
      get { return global::lth.egmTest.Test.internal__static_lth_egmTest_Header__FieldAccessorTable; }
    }
    
    public const int SenderFieldNumber = 1;
    private bool hasSender;
    private int sender_;
    public bool HasSender {
      get { return hasSender; }
    }
    public int Sender {
      get { return sender_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSender) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _headerFieldNames;
      if (hasSender) {
        output.WriteInt32(1, field_names[0], Sender);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSender) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Sender);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Header ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Header MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Header prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Header, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Header cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Header result;
      
      private Header PrepareBuilder() {
        if (resultIsReadOnly) {
          Header original = result;
          result = new Header();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Header MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.egmTest.Header.Descriptor; }
      }
      
      public override Header DefaultInstanceForType {
        get { return global::lth.egmTest.Header.DefaultInstance; }
      }
      
      public override Header BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Header) {
          return MergeFrom((Header) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Header other) {
        if (other == global::lth.egmTest.Header.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSender) {
          Sender = other.Sender;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_headerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _headerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSender = input.ReadInt32(ref result.sender_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSender {
        get { return result.hasSender; }
      }
      public int Sender {
        get { return result.Sender; }
        set { SetSender(value); }
      }
      public Builder SetSender(int value) {
        PrepareBuilder();
        result.hasSender = true;
        result.sender_ = value;
        return this;
      }
      public Builder ClearSender() {
        PrepareBuilder();
        result.hasSender = false;
        result.sender_ = 0;
        return this;
      }
    }
    static Header() {
      object.ReferenceEquals(global::lth.egmTest.Test.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Body : pb::GeneratedMessage<Body, Body.Builder> {
    private Body() { }
    private static readonly Body defaultInstance = new Body().MakeReadOnly();
    private static readonly string[] _bodyFieldNames = new string[] { "msg" };
    private static readonly uint[] _bodyFieldTags = new uint[] { 10 };
    public static Body DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Body DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Body ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.egmTest.Test.internal__static_lth_egmTest_Body__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Body, Body.Builder> InternalFieldAccessors {
      get { return global::lth.egmTest.Test.internal__static_lth_egmTest_Body__FieldAccessorTable; }
    }
    
    public const int MsgFieldNumber = 1;
    private bool hasMsg;
    private string msg_ = "";
    public bool HasMsg {
      get { return hasMsg; }
    }
    public string Msg {
      get { return msg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMsg) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _bodyFieldNames;
      if (hasMsg) {
        output.WriteString(1, field_names[0], Msg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMsg) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Msg);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Body ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Body ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Body ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Body ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Body ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Body ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Body ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Body ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Body ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Body ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Body MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Body prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Body, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Body cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Body result;
      
      private Body PrepareBuilder() {
        if (resultIsReadOnly) {
          Body original = result;
          result = new Body();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Body MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.egmTest.Body.Descriptor; }
      }
      
      public override Body DefaultInstanceForType {
        get { return global::lth.egmTest.Body.DefaultInstance; }
      }
      
      public override Body BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Body) {
          return MergeFrom((Body) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Body other) {
        if (other == global::lth.egmTest.Body.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bodyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bodyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMsg = input.ReadString(ref result.msg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMsg {
        get { return result.hasMsg; }
      }
      public string Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = "";
        return this;
      }
    }
    static Body() {
      object.ReferenceEquals(global::lth.egmTest.Test.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Packet : pb::GeneratedMessage<Packet, Packet.Builder> {
    private Packet() { }
    private static readonly Packet defaultInstance = new Packet().MakeReadOnly();
    private static readonly string[] _packetFieldNames = new string[] { "body", "header" };
    private static readonly uint[] _packetFieldTags = new uint[] { 18, 10 };
    public static Packet DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Packet DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Packet ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.egmTest.Test.internal__static_lth_egmTest_Packet__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Packet, Packet.Builder> InternalFieldAccessors {
      get { return global::lth.egmTest.Test.internal__static_lth_egmTest_Packet__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::lth.egmTest.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::lth.egmTest.Header Header {
      get { return header_ ?? global::lth.egmTest.Header.DefaultInstance; }
    }
    
    public const int BodyFieldNumber = 2;
    private bool hasBody;
    private global::lth.egmTest.Body body_;
    public bool HasBody {
      get { return hasBody; }
    }
    public global::lth.egmTest.Body Body {
      get { return body_ ?? global::lth.egmTest.Body.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!hasBody) return false;
        if (!Header.IsInitialized) return false;
        if (!Body.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _packetFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (hasBody) {
        output.WriteMessage(2, field_names[0], Body);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasBody) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Body);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Packet ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Packet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Packet ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Packet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Packet ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Packet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Packet ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Packet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Packet ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Packet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Packet MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Packet prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Packet, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Packet cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Packet result;
      
      private Packet PrepareBuilder() {
        if (resultIsReadOnly) {
          Packet original = result;
          result = new Packet();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Packet MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.egmTest.Packet.Descriptor; }
      }
      
      public override Packet DefaultInstanceForType {
        get { return global::lth.egmTest.Packet.DefaultInstance; }
      }
      
      public override Packet BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Packet) {
          return MergeFrom((Packet) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Packet other) {
        if (other == global::lth.egmTest.Packet.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasBody) {
          MergeBody(other.Body);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_packetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _packetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::lth.egmTest.Header.Builder subBuilder = global::lth.egmTest.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::lth.egmTest.Body.Builder subBuilder = global::lth.egmTest.Body.CreateBuilder();
              if (result.hasBody) {
                subBuilder.MergeFrom(Body);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Body = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::lth.egmTest.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::lth.egmTest.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::lth.egmTest.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::lth.egmTest.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::lth.egmTest.Header.DefaultInstance) {
            result.header_ = global::lth.egmTest.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasBody {
       get { return result.hasBody; }
      }
      public global::lth.egmTest.Body Body {
        get { return result.Body; }
        set { SetBody(value); }
      }
      public Builder SetBody(global::lth.egmTest.Body value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBody = true;
        result.body_ = value;
        return this;
      }
      public Builder SetBody(global::lth.egmTest.Body.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBody = true;
        result.body_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBody(global::lth.egmTest.Body value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBody &&
            result.body_ != global::lth.egmTest.Body.DefaultInstance) {
            result.body_ = global::lth.egmTest.Body.CreateBuilder(result.body_).MergeFrom(value).BuildPartial();
        } else {
          result.body_ = value;
        }
        result.hasBody = true;
        return this;
      }
      public Builder ClearBody() {
        PrepareBuilder();
        result.hasBody = false;
        result.body_ = null;
        return this;
      }
    }
    static Packet() {
      object.ReferenceEquals(global::lth.egmTest.Test.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
