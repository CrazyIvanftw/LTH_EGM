// Definition of the communication protocol between EGM_Sensor_controller and EGM_Sensor_Server
// -Gregory Austin
package lth.interface.egm;

message Header
{ 
    optional uint32 seqno = 1; // sequence number (to be able to find lost messages)
    optional uint32 tm = 2;    // controller time stamp in ms

    enum MessageType {
        MSGTYPE_UNDEFINED = 0;
        MSGTYPE_POS_COMMAND = 1;			    // the next position the controller wants to robot to move to
        MSGTYPE_POS_ACK = 2;				    // sent by EGM_Sensor_Server to EGM_Sensor_Controller
	    MSGTYPE_REQUEST_POS_VALUES = 3;
	    MSGTYPE_ACK_POS_VALUES = 4;
	    MSGTYPE_REQUEST_FEEDBACK_VALUES = 5;
	    MSGTYPE_ACK_FEEDBACK_VALUES = 6;
	    MSGTYPE_REQUEST_ALL_VALUES = 7;
	    MSGTYPE_ACK_ALL_VALUES = 8;
    }

    optional MessageType  mtype = 3 [default = MSGTYPE_UNDEFINED];

    enum EGM_Mode {
        MODE_POSITION_STREAM = 0;
        MODE_POSITION_GUIDANCE = 1;
        MODE_PATH_CORRECTION = 2;
    }

    optional EGM_Mode mode = 4 [default = MODE_POSITION_STREAM];
}

message Position_Values			// Cartesian position in mm
{
    optional double cartesian_x = 1;
    optional double cartesian_y = 2;
    optional double cartesian_z = 3;
    optional double quarternion_0 = 4;
    optional double quarternion_1 = 5;
    optional double quarternion_2 = 6;
    optional double quarternion_3 = 7;
    optional double euler_x = 8;
    optional double euler_y = 9;
    optional double euler_z = 10;
    optional Joints robot_joints = 11;
    optional Joints external_joints = 12;
    optional Time time = 13;
}

message Joints
{
    repeated double joints = 1;
}

message Time
{
    required uint64 sec = 1;        // time in seconds since 1 Jan 1970
    required uint64 usec = 2;       // time in microseconds since 1 Jan 1970
}

message Feedback_Values
{

    enum MotorStateType {
        MOTORS_UNDEFINED = 0;
        MOTORS_ON = 1;
        MOTORS_OFF = 2;
    }

    optional MotorStateType motorState = 1;

    enum MCIStateType {
        MCI_UNDEFINED = 0;
        MCI_ERROR = 1;
        MCI_STOPPED = 2;
        MCI_RUNNING = 3;
    }

    optional MCIStateType mciState = 2;
    optional bool mciConvergenceMet = 3;

    enum RapidCtrlExecStateType {
        RAPID_UNDEFINED = 0;
        RAPID_STOPPED = 1;
        RAPID_RUNNING = 2;
    };

    optional RapidCtrlExecStateType rapidExceState = 4;

    repeated double testSignals = 5;
    repeated double measuredForce = 6;


    
}

message EGM_Control {
    required Header header = 1;
    optional Position_Values desiredPosition = 2;
	optional Position_Values currentPosition = 3;
	optional Position_Values plannedPosition = 4;
    optional Feedback_Values feedback = 5;
}