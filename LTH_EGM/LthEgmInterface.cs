// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace lth.interface.egm {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LthEgmInterface {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_lth_interface_egm_Header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Header, global::lth.interface.egm.Header.Builder> internal__static_lth_interface_egm_Header__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_lth_interface_egm_Position_Values__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Position_Values, global::lth.interface.egm.Position_Values.Builder> internal__static_lth_interface_egm_Position_Values__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_lth_interface_egm_Joints__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Joints, global::lth.interface.egm.Joints.Builder> internal__static_lth_interface_egm_Joints__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_lth_interface_egm_Time__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Time, global::lth.interface.egm.Time.Builder> internal__static_lth_interface_egm_Time__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_lth_interface_egm_Feedback_Values__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Feedback_Values, global::lth.interface.egm.Feedback_Values.Builder> internal__static_lth_interface_egm_Feedback_Values__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_lth_interface_egm_EGM_Control__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.EGM_Control, global::lth.interface.egm.EGM_Control.Builder> internal__static_lth_interface_egm_EGM_Control__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static LthEgmInterface() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdsdGhfZWdtX2ludGVyZmFjZS5wcm90bxIRbHRoLmludGVyZmFjZS5lZ20i", 
            "owQKBkhlYWRlchINCgVzZXFubxgBIAEoDRIKCgJ0bRgCIAEoDRJHCgVtdHlw", 
            "ZRgDIAEoDjIlLmx0aC5pbnRlcmZhY2UuZWdtLkhlYWRlci5NZXNzYWdlVHlw", 
            "ZToRTVNHVFlQRV9VTkRFRklORUQSRgoEbW9kZRgEIAEoDjIiLmx0aC5pbnRl", 
            "cmZhY2UuZWdtLkhlYWRlci5FR01fTW9kZToUTU9ERV9QT1NJVElPTl9TVFJF", 
            "QU0ikAIKC01lc3NhZ2VUeXBlEhUKEU1TR1RZUEVfVU5ERUZJTkVEEAASFwoT", 
            "TVNHVFlQRV9QT1NfQ09NTUFORBABEhMKD01TR1RZUEVfUE9TX0FDSxACEh4K", 
            "Gk1TR1RZUEVfUkVRVUVTVF9QT1NfVkFMVUVTEAMSGgoWTVNHVFlQRV9BQ0tf", 
            "UE9TX1ZBTFVFUxAEEiMKH01TR1RZUEVfUkVRVUVTVF9GRUVEQkFDS19WQUxV", 
            "RVMQBRIfChtNU0dUWVBFX0FDS19GRUVEQkFDS19WQUxVRVMQBhIeChpNU0dU", 
            "WVBFX1JFUVVFU1RfQUxMX1ZBTFVFUxAHEhoKFk1TR1RZUEVfQUNLX0FMTF9W", 
            "QUxVRVMQCCJaCghFR01fTW9kZRIYChRNT0RFX1BPU0lUSU9OX1NUUkVBTRAA", 
            "EhoKFk1PREVfUE9TSVRJT05fR1VJREFOQ0UQARIYChRNT0RFX1BBVEhfQ09S", 
            "UkVDVElPThACIusCCg9Qb3NpdGlvbl9WYWx1ZXMSEwoLY2FydGVzaWFuX3gY", 
            "ASABKAESEwoLY2FydGVzaWFuX3kYAiABKAESEwoLY2FydGVzaWFuX3oYAyAB", 
            "KAESFQoNcXVhcnRlcm5pb25fMBgEIAEoARIVCg1xdWFydGVybmlvbl8xGAUg", 
            "ASgBEhUKDXF1YXJ0ZXJuaW9uXzIYBiABKAESFQoNcXVhcnRlcm5pb25fMxgH", 
            "IAEoARIPCgdldWxlcl94GAggASgBEg8KB2V1bGVyX3kYCSABKAESDwoHZXVs", 
            "ZXJfehgKIAEoARIvCgxyb2JvdF9qb2ludHMYCyABKAsyGS5sdGguaW50ZXJm", 
            "YWNlLmVnbS5Kb2ludHMSMgoPZXh0ZXJuYWxfam9pbnRzGAwgASgLMhkubHRo", 
            "LmludGVyZmFjZS5lZ20uSm9pbnRzEiUKBHRpbWUYDSABKAsyFy5sdGguaW50", 
            "ZXJmYWNlLmVnbS5UaW1lIhgKBkpvaW50cxIOCgZqb2ludHMYASADKAEiIQoE", 
            "VGltZRILCgNzZWMYASACKAQSDAoEdXNlYxgCIAIoBCKlBAoPRmVlZGJhY2tf", 
            "VmFsdWVzEkUKCm1vdG9yU3RhdGUYASABKA4yMS5sdGguaW50ZXJmYWNlLmVn", 
            "bS5GZWVkYmFja19WYWx1ZXMuTW90b3JTdGF0ZVR5cGUSQQoIbWNpU3RhdGUY", 
            "AiABKA4yLy5sdGguaW50ZXJmYWNlLmVnbS5GZWVkYmFja19WYWx1ZXMuTUNJ", 
            "U3RhdGVUeXBlEhkKEW1jaUNvbnZlcmdlbmNlTWV0GAMgASgIElEKDnJhcGlk", 
            "RXhjZVN0YXRlGAQgASgOMjkubHRoLmludGVyZmFjZS5lZ20uRmVlZGJhY2tf", 
            "VmFsdWVzLlJhcGlkQ3RybEV4ZWNTdGF0ZVR5cGUSEwoLdGVzdFNpZ25hbHMY", 
            "BSADKAESFQoNbWVhc3VyZWRGb3JjZRgGIAMoASJFCg5Nb3RvclN0YXRlVHlw", 
            "ZRIUChBNT1RPUlNfVU5ERUZJTkVEEAASDQoJTU9UT1JTX09OEAESDgoKTU9U", 
            "T1JTX09GRhACIlIKDE1DSVN0YXRlVHlwZRIRCg1NQ0lfVU5ERUZJTkVEEAAS", 
            "DQoJTUNJX0VSUk9SEAESDwoLTUNJX1NUT1BQRUQQAhIPCgtNQ0lfUlVOTklO", 
            "RxADIlMKFlJhcGlkQ3RybEV4ZWNTdGF0ZVR5cGUSEwoPUkFQSURfVU5ERUZJ", 
            "TkVEEAASEQoNUkFQSURfU1RPUFBFRBABEhEKDVJBUElEX1JVTk5JTkcQAiKl", 
            "AgoLRUdNX0NvbnRyb2wSKQoGaGVhZGVyGAEgAigLMhkubHRoLmludGVyZmFj", 
            "ZS5lZ20uSGVhZGVyEjsKD2Rlc2lyZWRQb3NpdGlvbhgCIAEoCzIiLmx0aC5p", 
            "bnRlcmZhY2UuZWdtLlBvc2l0aW9uX1ZhbHVlcxI7Cg9jdXJyZW50UG9zaXRp", 
            "b24YAyABKAsyIi5sdGguaW50ZXJmYWNlLmVnbS5Qb3NpdGlvbl9WYWx1ZXMS", 
            "OwoPcGxhbm5lZFBvc2l0aW9uGAQgASgLMiIubHRoLmludGVyZmFjZS5lZ20u", 
            "UG9zaXRpb25fVmFsdWVzEjQKCGZlZWRiYWNrGAUgASgLMiIubHRoLmludGVy", 
          "ZmFjZS5lZ20uRmVlZGJhY2tfVmFsdWVz"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_lth_interface_egm_Header__Descriptor = Descriptor.MessageTypes[0];
        internal__static_lth_interface_egm_Header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Header, global::lth.interface.egm.Header.Builder>(internal__static_lth_interface_egm_Header__Descriptor,
                new string[] { "Seqno", "Tm", "Mtype", "Mode", });
        internal__static_lth_interface_egm_Position_Values__Descriptor = Descriptor.MessageTypes[1];
        internal__static_lth_interface_egm_Position_Values__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Position_Values, global::lth.interface.egm.Position_Values.Builder>(internal__static_lth_interface_egm_Position_Values__Descriptor,
                new string[] { "CartesianX", "CartesianY", "CartesianZ", "Quarternion0", "Quarternion1", "Quarternion2", "Quarternion3", "EulerX", "EulerY", "EulerZ", "RobotJoints", "ExternalJoints", "Time", });
        internal__static_lth_interface_egm_Joints__Descriptor = Descriptor.MessageTypes[2];
        internal__static_lth_interface_egm_Joints__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Joints, global::lth.interface.egm.Joints.Builder>(internal__static_lth_interface_egm_Joints__Descriptor,
                new string[] { "Joints_", });
        internal__static_lth_interface_egm_Time__Descriptor = Descriptor.MessageTypes[3];
        internal__static_lth_interface_egm_Time__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Time, global::lth.interface.egm.Time.Builder>(internal__static_lth_interface_egm_Time__Descriptor,
                new string[] { "Sec", "Usec", });
        internal__static_lth_interface_egm_Feedback_Values__Descriptor = Descriptor.MessageTypes[4];
        internal__static_lth_interface_egm_Feedback_Values__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.Feedback_Values, global::lth.interface.egm.Feedback_Values.Builder>(internal__static_lth_interface_egm_Feedback_Values__Descriptor,
                new string[] { "MotorState", "MciState", "MciConvergenceMet", "RapidExceState", "TestSignals", "MeasuredForce", });
        internal__static_lth_interface_egm_EGM_Control__Descriptor = Descriptor.MessageTypes[5];
        internal__static_lth_interface_egm_EGM_Control__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.interface.egm.EGM_Control, global::lth.interface.egm.EGM_Control.Builder>(internal__static_lth_interface_egm_EGM_Control__Descriptor,
                new string[] { "Header", "DesiredPosition", "CurrentPosition", "PlannedPosition", "Feedback", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Header : pb::GeneratedMessage<Header, Header.Builder> {
    private Header() { }
    private static readonly Header defaultInstance = new Header().MakeReadOnly();
    private static readonly string[] _headerFieldNames = new string[] { "mode", "mtype", "seqno", "tm" };
    private static readonly uint[] _headerFieldTags = new uint[] { 32, 24, 8, 16 };
    public static Header DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Header DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Header ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Header__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Header, Header.Builder> InternalFieldAccessors {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Header__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MessageType {
        MSGTYPE_UNDEFINED = 0,
        MSGTYPE_POS_COMMAND = 1,
        MSGTYPE_POS_ACK = 2,
        MSGTYPE_REQUEST_POS_VALUES = 3,
        MSGTYPE_ACK_POS_VALUES = 4,
        MSGTYPE_REQUEST_FEEDBACK_VALUES = 5,
        MSGTYPE_ACK_FEEDBACK_VALUES = 6,
        MSGTYPE_REQUEST_ALL_VALUES = 7,
        MSGTYPE_ACK_ALL_VALUES = 8,
      }
      
      public enum EGM_Mode {
        MODE_POSITION_STREAM = 0,
        MODE_POSITION_GUIDANCE = 1,
        MODE_PATH_CORRECTION = 2,
      }
      
    }
    #endregion
    
    public const int SeqnoFieldNumber = 1;
    private bool hasSeqno;
    private uint seqno_;
    public bool HasSeqno {
      get { return hasSeqno; }
    }
    [global::System.CLSCompliant(false)]
    public uint Seqno {
      get { return seqno_; }
    }
    
    public const int TmFieldNumber = 2;
    private bool hasTm;
    private uint tm_;
    public bool HasTm {
      get { return hasTm; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tm {
      get { return tm_; }
    }
    
    public const int MtypeFieldNumber = 3;
    private bool hasMtype;
    private global::lth.interface.egm.Header.Types.MessageType mtype_ = global::lth.interface.egm.Header.Types.MessageType.MSGTYPE_UNDEFINED;
    public bool HasMtype {
      get { return hasMtype; }
    }
    public global::lth.interface.egm.Header.Types.MessageType Mtype {
      get { return mtype_; }
    }
    
    public const int ModeFieldNumber = 4;
    private bool hasMode;
    private global::lth.interface.egm.Header.Types.EGM_Mode mode_ = global::lth.interface.egm.Header.Types.EGM_Mode.MODE_POSITION_STREAM;
    public bool HasMode {
      get { return hasMode; }
    }
    public global::lth.interface.egm.Header.Types.EGM_Mode Mode {
      get { return mode_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _headerFieldNames;
      if (hasSeqno) {
        output.WriteUInt32(1, field_names[2], Seqno);
      }
      if (hasTm) {
        output.WriteUInt32(2, field_names[3], Tm);
      }
      if (hasMtype) {
        output.WriteEnum(3, field_names[1], (int) Mtype, Mtype);
      }
      if (hasMode) {
        output.WriteEnum(4, field_names[0], (int) Mode, Mode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSeqno) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Seqno);
      }
      if (hasTm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Tm);
      }
      if (hasMtype) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Mtype);
      }
      if (hasMode) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Mode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Header ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Header MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Header prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Header, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Header cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Header result;
      
      private Header PrepareBuilder() {
        if (resultIsReadOnly) {
          Header original = result;
          result = new Header();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Header MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.interface.egm.Header.Descriptor; }
      }
      
      public override Header DefaultInstanceForType {
        get { return global::lth.interface.egm.Header.DefaultInstance; }
      }
      
      public override Header BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Header) {
          return MergeFrom((Header) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Header other) {
        if (other == global::lth.interface.egm.Header.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeqno) {
          Seqno = other.Seqno;
        }
        if (other.HasTm) {
          Tm = other.Tm;
        }
        if (other.HasMtype) {
          Mtype = other.Mtype;
        }
        if (other.HasMode) {
          Mode = other.Mode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_headerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _headerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSeqno = input.ReadUInt32(ref result.seqno_);
              break;
            }
            case 16: {
              result.hasTm = input.ReadUInt32(ref result.tm_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.mtype_, out unknown)) {
                result.hasMtype = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.mode_, out unknown)) {
                result.hasMode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeqno {
        get { return result.hasSeqno; }
      }
      [global::System.CLSCompliant(false)]
      public uint Seqno {
        get { return result.Seqno; }
        set { SetSeqno(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSeqno(uint value) {
        PrepareBuilder();
        result.hasSeqno = true;
        result.seqno_ = value;
        return this;
      }
      public Builder ClearSeqno() {
        PrepareBuilder();
        result.hasSeqno = false;
        result.seqno_ = 0;
        return this;
      }
      
      public bool HasTm {
        get { return result.hasTm; }
      }
      [global::System.CLSCompliant(false)]
      public uint Tm {
        get { return result.Tm; }
        set { SetTm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTm(uint value) {
        PrepareBuilder();
        result.hasTm = true;
        result.tm_ = value;
        return this;
      }
      public Builder ClearTm() {
        PrepareBuilder();
        result.hasTm = false;
        result.tm_ = 0;
        return this;
      }
      
      public bool HasMtype {
       get { return result.hasMtype; }
      }
      public global::lth.interface.egm.Header.Types.MessageType Mtype {
        get { return result.Mtype; }
        set { SetMtype(value); }
      }
      public Builder SetMtype(global::lth.interface.egm.Header.Types.MessageType value) {
        PrepareBuilder();
        result.hasMtype = true;
        result.mtype_ = value;
        return this;
      }
      public Builder ClearMtype() {
        PrepareBuilder();
        result.hasMtype = false;
        result.mtype_ = global::lth.interface.egm.Header.Types.MessageType.MSGTYPE_UNDEFINED;
        return this;
      }
      
      public bool HasMode {
       get { return result.hasMode; }
      }
      public global::lth.interface.egm.Header.Types.EGM_Mode Mode {
        get { return result.Mode; }
        set { SetMode(value); }
      }
      public Builder SetMode(global::lth.interface.egm.Header.Types.EGM_Mode value) {
        PrepareBuilder();
        result.hasMode = true;
        result.mode_ = value;
        return this;
      }
      public Builder ClearMode() {
        PrepareBuilder();
        result.hasMode = false;
        result.mode_ = global::lth.interface.egm.Header.Types.EGM_Mode.MODE_POSITION_STREAM;
        return this;
      }
    }
    static Header() {
      object.ReferenceEquals(global::lth.interface.egm.LthEgmInterface.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Position_Values : pb::GeneratedMessage<Position_Values, Position_Values.Builder> {
    private Position_Values() { }
    private static readonly Position_Values defaultInstance = new Position_Values().MakeReadOnly();
    private static readonly string[] _positionValuesFieldNames = new string[] { "cartesian_x", "cartesian_y", "cartesian_z", "euler_x", "euler_y", "euler_z", "external_joints", "quarternion_0", "quarternion_1", "quarternion_2", "quarternion_3", "robot_joints", "time" };
    private static readonly uint[] _positionValuesFieldTags = new uint[] { 9, 17, 25, 65, 73, 81, 98, 33, 41, 49, 57, 90, 106 };
    public static Position_Values DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Position_Values DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Position_Values ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Position_Values__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Position_Values, Position_Values.Builder> InternalFieldAccessors {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Position_Values__FieldAccessorTable; }
    }
    
    public const int CartesianXFieldNumber = 1;
    private bool hasCartesianX;
    private double cartesianX_;
    public bool HasCartesianX {
      get { return hasCartesianX; }
    }
    public double CartesianX {
      get { return cartesianX_; }
    }
    
    public const int CartesianYFieldNumber = 2;
    private bool hasCartesianY;
    private double cartesianY_;
    public bool HasCartesianY {
      get { return hasCartesianY; }
    }
    public double CartesianY {
      get { return cartesianY_; }
    }
    
    public const int CartesianZFieldNumber = 3;
    private bool hasCartesianZ;
    private double cartesianZ_;
    public bool HasCartesianZ {
      get { return hasCartesianZ; }
    }
    public double CartesianZ {
      get { return cartesianZ_; }
    }
    
    public const int Quarternion0FieldNumber = 4;
    private bool hasQuarternion0;
    private double quarternion0_;
    public bool HasQuarternion0 {
      get { return hasQuarternion0; }
    }
    public double Quarternion0 {
      get { return quarternion0_; }
    }
    
    public const int Quarternion1FieldNumber = 5;
    private bool hasQuarternion1;
    private double quarternion1_;
    public bool HasQuarternion1 {
      get { return hasQuarternion1; }
    }
    public double Quarternion1 {
      get { return quarternion1_; }
    }
    
    public const int Quarternion2FieldNumber = 6;
    private bool hasQuarternion2;
    private double quarternion2_;
    public bool HasQuarternion2 {
      get { return hasQuarternion2; }
    }
    public double Quarternion2 {
      get { return quarternion2_; }
    }
    
    public const int Quarternion3FieldNumber = 7;
    private bool hasQuarternion3;
    private double quarternion3_;
    public bool HasQuarternion3 {
      get { return hasQuarternion3; }
    }
    public double Quarternion3 {
      get { return quarternion3_; }
    }
    
    public const int EulerXFieldNumber = 8;
    private bool hasEulerX;
    private double eulerX_;
    public bool HasEulerX {
      get { return hasEulerX; }
    }
    public double EulerX {
      get { return eulerX_; }
    }
    
    public const int EulerYFieldNumber = 9;
    private bool hasEulerY;
    private double eulerY_;
    public bool HasEulerY {
      get { return hasEulerY; }
    }
    public double EulerY {
      get { return eulerY_; }
    }
    
    public const int EulerZFieldNumber = 10;
    private bool hasEulerZ;
    private double eulerZ_;
    public bool HasEulerZ {
      get { return hasEulerZ; }
    }
    public double EulerZ {
      get { return eulerZ_; }
    }
    
    public const int RobotJointsFieldNumber = 11;
    private bool hasRobotJoints;
    private global::lth.interface.egm.Joints robotJoints_;
    public bool HasRobotJoints {
      get { return hasRobotJoints; }
    }
    public global::lth.interface.egm.Joints RobotJoints {
      get { return robotJoints_ ?? global::lth.interface.egm.Joints.DefaultInstance; }
    }
    
    public const int ExternalJointsFieldNumber = 12;
    private bool hasExternalJoints;
    private global::lth.interface.egm.Joints externalJoints_;
    public bool HasExternalJoints {
      get { return hasExternalJoints; }
    }
    public global::lth.interface.egm.Joints ExternalJoints {
      get { return externalJoints_ ?? global::lth.interface.egm.Joints.DefaultInstance; }
    }
    
    public const int TimeFieldNumber = 13;
    private bool hasTime;
    private global::lth.interface.egm.Time time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public global::lth.interface.egm.Time Time {
      get { return time_ ?? global::lth.interface.egm.Time.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasTime) {
          if (!Time.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _positionValuesFieldNames;
      if (hasCartesianX) {
        output.WriteDouble(1, field_names[0], CartesianX);
      }
      if (hasCartesianY) {
        output.WriteDouble(2, field_names[1], CartesianY);
      }
      if (hasCartesianZ) {
        output.WriteDouble(3, field_names[2], CartesianZ);
      }
      if (hasQuarternion0) {
        output.WriteDouble(4, field_names[7], Quarternion0);
      }
      if (hasQuarternion1) {
        output.WriteDouble(5, field_names[8], Quarternion1);
      }
      if (hasQuarternion2) {
        output.WriteDouble(6, field_names[9], Quarternion2);
      }
      if (hasQuarternion3) {
        output.WriteDouble(7, field_names[10], Quarternion3);
      }
      if (hasEulerX) {
        output.WriteDouble(8, field_names[3], EulerX);
      }
      if (hasEulerY) {
        output.WriteDouble(9, field_names[4], EulerY);
      }
      if (hasEulerZ) {
        output.WriteDouble(10, field_names[5], EulerZ);
      }
      if (hasRobotJoints) {
        output.WriteMessage(11, field_names[11], RobotJoints);
      }
      if (hasExternalJoints) {
        output.WriteMessage(12, field_names[6], ExternalJoints);
      }
      if (hasTime) {
        output.WriteMessage(13, field_names[12], Time);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCartesianX) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, CartesianX);
      }
      if (hasCartesianY) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, CartesianY);
      }
      if (hasCartesianZ) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, CartesianZ);
      }
      if (hasQuarternion0) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, Quarternion0);
      }
      if (hasQuarternion1) {
        size += pb::CodedOutputStream.ComputeDoubleSize(5, Quarternion1);
      }
      if (hasQuarternion2) {
        size += pb::CodedOutputStream.ComputeDoubleSize(6, Quarternion2);
      }
      if (hasQuarternion3) {
        size += pb::CodedOutputStream.ComputeDoubleSize(7, Quarternion3);
      }
      if (hasEulerX) {
        size += pb::CodedOutputStream.ComputeDoubleSize(8, EulerX);
      }
      if (hasEulerY) {
        size += pb::CodedOutputStream.ComputeDoubleSize(9, EulerY);
      }
      if (hasEulerZ) {
        size += pb::CodedOutputStream.ComputeDoubleSize(10, EulerZ);
      }
      if (hasRobotJoints) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, RobotJoints);
      }
      if (hasExternalJoints) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, ExternalJoints);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, Time);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Position_Values ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position_Values ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position_Values ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position_Values ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position_Values ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position_Values ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Position_Values ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Position_Values ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Position_Values ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position_Values ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Position_Values MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Position_Values prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Position_Values, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Position_Values cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Position_Values result;
      
      private Position_Values PrepareBuilder() {
        if (resultIsReadOnly) {
          Position_Values original = result;
          result = new Position_Values();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Position_Values MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.interface.egm.Position_Values.Descriptor; }
      }
      
      public override Position_Values DefaultInstanceForType {
        get { return global::lth.interface.egm.Position_Values.DefaultInstance; }
      }
      
      public override Position_Values BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Position_Values) {
          return MergeFrom((Position_Values) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Position_Values other) {
        if (other == global::lth.interface.egm.Position_Values.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCartesianX) {
          CartesianX = other.CartesianX;
        }
        if (other.HasCartesianY) {
          CartesianY = other.CartesianY;
        }
        if (other.HasCartesianZ) {
          CartesianZ = other.CartesianZ;
        }
        if (other.HasQuarternion0) {
          Quarternion0 = other.Quarternion0;
        }
        if (other.HasQuarternion1) {
          Quarternion1 = other.Quarternion1;
        }
        if (other.HasQuarternion2) {
          Quarternion2 = other.Quarternion2;
        }
        if (other.HasQuarternion3) {
          Quarternion3 = other.Quarternion3;
        }
        if (other.HasEulerX) {
          EulerX = other.EulerX;
        }
        if (other.HasEulerY) {
          EulerY = other.EulerY;
        }
        if (other.HasEulerZ) {
          EulerZ = other.EulerZ;
        }
        if (other.HasRobotJoints) {
          MergeRobotJoints(other.RobotJoints);
        }
        if (other.HasExternalJoints) {
          MergeExternalJoints(other.ExternalJoints);
        }
        if (other.HasTime) {
          MergeTime(other.Time);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_positionValuesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _positionValuesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasCartesianX = input.ReadDouble(ref result.cartesianX_);
              break;
            }
            case 17: {
              result.hasCartesianY = input.ReadDouble(ref result.cartesianY_);
              break;
            }
            case 25: {
              result.hasCartesianZ = input.ReadDouble(ref result.cartesianZ_);
              break;
            }
            case 33: {
              result.hasQuarternion0 = input.ReadDouble(ref result.quarternion0_);
              break;
            }
            case 41: {
              result.hasQuarternion1 = input.ReadDouble(ref result.quarternion1_);
              break;
            }
            case 49: {
              result.hasQuarternion2 = input.ReadDouble(ref result.quarternion2_);
              break;
            }
            case 57: {
              result.hasQuarternion3 = input.ReadDouble(ref result.quarternion3_);
              break;
            }
            case 65: {
              result.hasEulerX = input.ReadDouble(ref result.eulerX_);
              break;
            }
            case 73: {
              result.hasEulerY = input.ReadDouble(ref result.eulerY_);
              break;
            }
            case 81: {
              result.hasEulerZ = input.ReadDouble(ref result.eulerZ_);
              break;
            }
            case 90: {
              global::lth.interface.egm.Joints.Builder subBuilder = global::lth.interface.egm.Joints.CreateBuilder();
              if (result.hasRobotJoints) {
                subBuilder.MergeFrom(RobotJoints);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RobotJoints = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::lth.interface.egm.Joints.Builder subBuilder = global::lth.interface.egm.Joints.CreateBuilder();
              if (result.hasExternalJoints) {
                subBuilder.MergeFrom(ExternalJoints);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExternalJoints = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::lth.interface.egm.Time.Builder subBuilder = global::lth.interface.egm.Time.CreateBuilder();
              if (result.hasTime) {
                subBuilder.MergeFrom(Time);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Time = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCartesianX {
        get { return result.hasCartesianX; }
      }
      public double CartesianX {
        get { return result.CartesianX; }
        set { SetCartesianX(value); }
      }
      public Builder SetCartesianX(double value) {
        PrepareBuilder();
        result.hasCartesianX = true;
        result.cartesianX_ = value;
        return this;
      }
      public Builder ClearCartesianX() {
        PrepareBuilder();
        result.hasCartesianX = false;
        result.cartesianX_ = 0D;
        return this;
      }
      
      public bool HasCartesianY {
        get { return result.hasCartesianY; }
      }
      public double CartesianY {
        get { return result.CartesianY; }
        set { SetCartesianY(value); }
      }
      public Builder SetCartesianY(double value) {
        PrepareBuilder();
        result.hasCartesianY = true;
        result.cartesianY_ = value;
        return this;
      }
      public Builder ClearCartesianY() {
        PrepareBuilder();
        result.hasCartesianY = false;
        result.cartesianY_ = 0D;
        return this;
      }
      
      public bool HasCartesianZ {
        get { return result.hasCartesianZ; }
      }
      public double CartesianZ {
        get { return result.CartesianZ; }
        set { SetCartesianZ(value); }
      }
      public Builder SetCartesianZ(double value) {
        PrepareBuilder();
        result.hasCartesianZ = true;
        result.cartesianZ_ = value;
        return this;
      }
      public Builder ClearCartesianZ() {
        PrepareBuilder();
        result.hasCartesianZ = false;
        result.cartesianZ_ = 0D;
        return this;
      }
      
      public bool HasQuarternion0 {
        get { return result.hasQuarternion0; }
      }
      public double Quarternion0 {
        get { return result.Quarternion0; }
        set { SetQuarternion0(value); }
      }
      public Builder SetQuarternion0(double value) {
        PrepareBuilder();
        result.hasQuarternion0 = true;
        result.quarternion0_ = value;
        return this;
      }
      public Builder ClearQuarternion0() {
        PrepareBuilder();
        result.hasQuarternion0 = false;
        result.quarternion0_ = 0D;
        return this;
      }
      
      public bool HasQuarternion1 {
        get { return result.hasQuarternion1; }
      }
      public double Quarternion1 {
        get { return result.Quarternion1; }
        set { SetQuarternion1(value); }
      }
      public Builder SetQuarternion1(double value) {
        PrepareBuilder();
        result.hasQuarternion1 = true;
        result.quarternion1_ = value;
        return this;
      }
      public Builder ClearQuarternion1() {
        PrepareBuilder();
        result.hasQuarternion1 = false;
        result.quarternion1_ = 0D;
        return this;
      }
      
      public bool HasQuarternion2 {
        get { return result.hasQuarternion2; }
      }
      public double Quarternion2 {
        get { return result.Quarternion2; }
        set { SetQuarternion2(value); }
      }
      public Builder SetQuarternion2(double value) {
        PrepareBuilder();
        result.hasQuarternion2 = true;
        result.quarternion2_ = value;
        return this;
      }
      public Builder ClearQuarternion2() {
        PrepareBuilder();
        result.hasQuarternion2 = false;
        result.quarternion2_ = 0D;
        return this;
      }
      
      public bool HasQuarternion3 {
        get { return result.hasQuarternion3; }
      }
      public double Quarternion3 {
        get { return result.Quarternion3; }
        set { SetQuarternion3(value); }
      }
      public Builder SetQuarternion3(double value) {
        PrepareBuilder();
        result.hasQuarternion3 = true;
        result.quarternion3_ = value;
        return this;
      }
      public Builder ClearQuarternion3() {
        PrepareBuilder();
        result.hasQuarternion3 = false;
        result.quarternion3_ = 0D;
        return this;
      }
      
      public bool HasEulerX {
        get { return result.hasEulerX; }
      }
      public double EulerX {
        get { return result.EulerX; }
        set { SetEulerX(value); }
      }
      public Builder SetEulerX(double value) {
        PrepareBuilder();
        result.hasEulerX = true;
        result.eulerX_ = value;
        return this;
      }
      public Builder ClearEulerX() {
        PrepareBuilder();
        result.hasEulerX = false;
        result.eulerX_ = 0D;
        return this;
      }
      
      public bool HasEulerY {
        get { return result.hasEulerY; }
      }
      public double EulerY {
        get { return result.EulerY; }
        set { SetEulerY(value); }
      }
      public Builder SetEulerY(double value) {
        PrepareBuilder();
        result.hasEulerY = true;
        result.eulerY_ = value;
        return this;
      }
      public Builder ClearEulerY() {
        PrepareBuilder();
        result.hasEulerY = false;
        result.eulerY_ = 0D;
        return this;
      }
      
      public bool HasEulerZ {
        get { return result.hasEulerZ; }
      }
      public double EulerZ {
        get { return result.EulerZ; }
        set { SetEulerZ(value); }
      }
      public Builder SetEulerZ(double value) {
        PrepareBuilder();
        result.hasEulerZ = true;
        result.eulerZ_ = value;
        return this;
      }
      public Builder ClearEulerZ() {
        PrepareBuilder();
        result.hasEulerZ = false;
        result.eulerZ_ = 0D;
        return this;
      }
      
      public bool HasRobotJoints {
       get { return result.hasRobotJoints; }
      }
      public global::lth.interface.egm.Joints RobotJoints {
        get { return result.RobotJoints; }
        set { SetRobotJoints(value); }
      }
      public Builder SetRobotJoints(global::lth.interface.egm.Joints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRobotJoints = true;
        result.robotJoints_ = value;
        return this;
      }
      public Builder SetRobotJoints(global::lth.interface.egm.Joints.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRobotJoints = true;
        result.robotJoints_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRobotJoints(global::lth.interface.egm.Joints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRobotJoints &&
            result.robotJoints_ != global::lth.interface.egm.Joints.DefaultInstance) {
            result.robotJoints_ = global::lth.interface.egm.Joints.CreateBuilder(result.robotJoints_).MergeFrom(value).BuildPartial();
        } else {
          result.robotJoints_ = value;
        }
        result.hasRobotJoints = true;
        return this;
      }
      public Builder ClearRobotJoints() {
        PrepareBuilder();
        result.hasRobotJoints = false;
        result.robotJoints_ = null;
        return this;
      }
      
      public bool HasExternalJoints {
       get { return result.hasExternalJoints; }
      }
      public global::lth.interface.egm.Joints ExternalJoints {
        get { return result.ExternalJoints; }
        set { SetExternalJoints(value); }
      }
      public Builder SetExternalJoints(global::lth.interface.egm.Joints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExternalJoints = true;
        result.externalJoints_ = value;
        return this;
      }
      public Builder SetExternalJoints(global::lth.interface.egm.Joints.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExternalJoints = true;
        result.externalJoints_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExternalJoints(global::lth.interface.egm.Joints value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExternalJoints &&
            result.externalJoints_ != global::lth.interface.egm.Joints.DefaultInstance) {
            result.externalJoints_ = global::lth.interface.egm.Joints.CreateBuilder(result.externalJoints_).MergeFrom(value).BuildPartial();
        } else {
          result.externalJoints_ = value;
        }
        result.hasExternalJoints = true;
        return this;
      }
      public Builder ClearExternalJoints() {
        PrepareBuilder();
        result.hasExternalJoints = false;
        result.externalJoints_ = null;
        return this;
      }
      
      public bool HasTime {
       get { return result.hasTime; }
      }
      public global::lth.interface.egm.Time Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(global::lth.interface.egm.Time value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder SetTime(global::lth.interface.egm.Time.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTime(global::lth.interface.egm.Time value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTime &&
            result.time_ != global::lth.interface.egm.Time.DefaultInstance) {
            result.time_ = global::lth.interface.egm.Time.CreateBuilder(result.time_).MergeFrom(value).BuildPartial();
        } else {
          result.time_ = value;
        }
        result.hasTime = true;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = null;
        return this;
      }
    }
    static Position_Values() {
      object.ReferenceEquals(global::lth.interface.egm.LthEgmInterface.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Joints : pb::GeneratedMessage<Joints, Joints.Builder> {
    private Joints() { }
    private static readonly Joints defaultInstance = new Joints().MakeReadOnly();
    private static readonly string[] _jointsFieldNames = new string[] { "joints" };
    private static readonly uint[] _jointsFieldTags = new uint[] { 9 };
    public static Joints DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Joints DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Joints ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Joints__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Joints, Joints.Builder> InternalFieldAccessors {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Joints__FieldAccessorTable; }
    }
    
    public const int Joints_FieldNumber = 1;
    private pbc::PopsicleList<double> joints_ = new pbc::PopsicleList<double>();
    public scg::IList<double> Joints_List {
      get { return pbc::Lists.AsReadOnly(joints_); }
    }
    public int Joints_Count {
      get { return joints_.Count; }
    }
    public double GetJoints_(int index) {
      return joints_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _jointsFieldNames;
      if (joints_.Count > 0) {
        output.WriteDoubleArray(1, field_names[0], joints_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * joints_.Count;
        size += dataSize;
        size += 1 * joints_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Joints ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Joints ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Joints ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Joints ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Joints ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Joints ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Joints ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Joints ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Joints ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Joints ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Joints MakeReadOnly() {
      joints_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Joints prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Joints, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Joints cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Joints result;
      
      private Joints PrepareBuilder() {
        if (resultIsReadOnly) {
          Joints original = result;
          result = new Joints();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Joints MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.interface.egm.Joints.Descriptor; }
      }
      
      public override Joints DefaultInstanceForType {
        get { return global::lth.interface.egm.Joints.DefaultInstance; }
      }
      
      public override Joints BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Joints) {
          return MergeFrom((Joints) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Joints other) {
        if (other == global::lth.interface.egm.Joints.DefaultInstance) return this;
        PrepareBuilder();
        if (other.joints_.Count != 0) {
          result.joints_.Add(other.joints_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_jointsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _jointsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 9: {
              input.ReadDoubleArray(tag, field_name, result.joints_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<double> Joints_List {
        get { return PrepareBuilder().joints_; }
      }
      public int Joints_Count {
        get { return result.Joints_Count; }
      }
      public double GetJoints_(int index) {
        return result.GetJoints_(index);
      }
      public Builder SetJoints_(int index, double value) {
        PrepareBuilder();
        result.joints_[index] = value;
        return this;
      }
      public Builder AddJoints_(double value) {
        PrepareBuilder();
        result.joints_.Add(value);
        return this;
      }
      public Builder AddRangeJoints_(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.joints_.Add(values);
        return this;
      }
      public Builder ClearJoints_() {
        PrepareBuilder();
        result.joints_.Clear();
        return this;
      }
    }
    static Joints() {
      object.ReferenceEquals(global::lth.interface.egm.LthEgmInterface.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Time : pb::GeneratedMessage<Time, Time.Builder> {
    private Time() { }
    private static readonly Time defaultInstance = new Time().MakeReadOnly();
    private static readonly string[] _timeFieldNames = new string[] { "sec", "usec" };
    private static readonly uint[] _timeFieldTags = new uint[] { 8, 16 };
    public static Time DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Time DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Time ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Time__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Time, Time.Builder> InternalFieldAccessors {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Time__FieldAccessorTable; }
    }
    
    public const int SecFieldNumber = 1;
    private bool hasSec;
    private ulong sec_;
    public bool HasSec {
      get { return hasSec; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Sec {
      get { return sec_; }
    }
    
    public const int UsecFieldNumber = 2;
    private bool hasUsec;
    private ulong usec_;
    public bool HasUsec {
      get { return hasUsec; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Usec {
      get { return usec_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSec) return false;
        if (!hasUsec) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _timeFieldNames;
      if (hasSec) {
        output.WriteUInt64(1, field_names[0], Sec);
      }
      if (hasUsec) {
        output.WriteUInt64(2, field_names[1], Usec);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSec) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Sec);
      }
      if (hasUsec) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Usec);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Time ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Time ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Time ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Time ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Time ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Time ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Time ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Time ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Time ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Time ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Time MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Time prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Time, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Time cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Time result;
      
      private Time PrepareBuilder() {
        if (resultIsReadOnly) {
          Time original = result;
          result = new Time();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Time MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.interface.egm.Time.Descriptor; }
      }
      
      public override Time DefaultInstanceForType {
        get { return global::lth.interface.egm.Time.DefaultInstance; }
      }
      
      public override Time BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Time) {
          return MergeFrom((Time) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Time other) {
        if (other == global::lth.interface.egm.Time.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSec) {
          Sec = other.Sec;
        }
        if (other.HasUsec) {
          Usec = other.Usec;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_timeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _timeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSec = input.ReadUInt64(ref result.sec_);
              break;
            }
            case 16: {
              result.hasUsec = input.ReadUInt64(ref result.usec_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSec {
        get { return result.hasSec; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Sec {
        get { return result.Sec; }
        set { SetSec(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSec(ulong value) {
        PrepareBuilder();
        result.hasSec = true;
        result.sec_ = value;
        return this;
      }
      public Builder ClearSec() {
        PrepareBuilder();
        result.hasSec = false;
        result.sec_ = 0UL;
        return this;
      }
      
      public bool HasUsec {
        get { return result.hasUsec; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Usec {
        get { return result.Usec; }
        set { SetUsec(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUsec(ulong value) {
        PrepareBuilder();
        result.hasUsec = true;
        result.usec_ = value;
        return this;
      }
      public Builder ClearUsec() {
        PrepareBuilder();
        result.hasUsec = false;
        result.usec_ = 0UL;
        return this;
      }
    }
    static Time() {
      object.ReferenceEquals(global::lth.interface.egm.LthEgmInterface.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Feedback_Values : pb::GeneratedMessage<Feedback_Values, Feedback_Values.Builder> {
    private Feedback_Values() { }
    private static readonly Feedback_Values defaultInstance = new Feedback_Values().MakeReadOnly();
    private static readonly string[] _feedbackValuesFieldNames = new string[] { "mciConvergenceMet", "mciState", "measuredForce", "motorState", "rapidExceState", "testSignals" };
    private static readonly uint[] _feedbackValuesFieldTags = new uint[] { 24, 16, 49, 8, 32, 41 };
    public static Feedback_Values DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Feedback_Values DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Feedback_Values ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Feedback_Values__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Feedback_Values, Feedback_Values.Builder> InternalFieldAccessors {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_Feedback_Values__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MotorStateType {
        MOTORS_UNDEFINED = 0,
        MOTORS_ON = 1,
        MOTORS_OFF = 2,
      }
      
      public enum MCIStateType {
        MCI_UNDEFINED = 0,
        MCI_ERROR = 1,
        MCI_STOPPED = 2,
        MCI_RUNNING = 3,
      }
      
      public enum RapidCtrlExecStateType {
        RAPID_UNDEFINED = 0,
        RAPID_STOPPED = 1,
        RAPID_RUNNING = 2,
      }
      
    }
    #endregion
    
    public const int MotorStateFieldNumber = 1;
    private bool hasMotorState;
    private global::lth.interface.egm.Feedback_Values.Types.MotorStateType motorState_ = global::lth.interface.egm.Feedback_Values.Types.MotorStateType.MOTORS_UNDEFINED;
    public bool HasMotorState {
      get { return hasMotorState; }
    }
    public global::lth.interface.egm.Feedback_Values.Types.MotorStateType MotorState {
      get { return motorState_; }
    }
    
    public const int MciStateFieldNumber = 2;
    private bool hasMciState;
    private global::lth.interface.egm.Feedback_Values.Types.MCIStateType mciState_ = global::lth.interface.egm.Feedback_Values.Types.MCIStateType.MCI_UNDEFINED;
    public bool HasMciState {
      get { return hasMciState; }
    }
    public global::lth.interface.egm.Feedback_Values.Types.MCIStateType MciState {
      get { return mciState_; }
    }
    
    public const int MciConvergenceMetFieldNumber = 3;
    private bool hasMciConvergenceMet;
    private bool mciConvergenceMet_;
    public bool HasMciConvergenceMet {
      get { return hasMciConvergenceMet; }
    }
    public bool MciConvergenceMet {
      get { return mciConvergenceMet_; }
    }
    
    public const int RapidExceStateFieldNumber = 4;
    private bool hasRapidExceState;
    private global::lth.interface.egm.Feedback_Values.Types.RapidCtrlExecStateType rapidExceState_ = global::lth.interface.egm.Feedback_Values.Types.RapidCtrlExecStateType.RAPID_UNDEFINED;
    public bool HasRapidExceState {
      get { return hasRapidExceState; }
    }
    public global::lth.interface.egm.Feedback_Values.Types.RapidCtrlExecStateType RapidExceState {
      get { return rapidExceState_; }
    }
    
    public const int TestSignalsFieldNumber = 5;
    private pbc::PopsicleList<double> testSignals_ = new pbc::PopsicleList<double>();
    public scg::IList<double> TestSignalsList {
      get { return pbc::Lists.AsReadOnly(testSignals_); }
    }
    public int TestSignalsCount {
      get { return testSignals_.Count; }
    }
    public double GetTestSignals(int index) {
      return testSignals_[index];
    }
    
    public const int MeasuredForceFieldNumber = 6;
    private pbc::PopsicleList<double> measuredForce_ = new pbc::PopsicleList<double>();
    public scg::IList<double> MeasuredForceList {
      get { return pbc::Lists.AsReadOnly(measuredForce_); }
    }
    public int MeasuredForceCount {
      get { return measuredForce_.Count; }
    }
    public double GetMeasuredForce(int index) {
      return measuredForce_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _feedbackValuesFieldNames;
      if (hasMotorState) {
        output.WriteEnum(1, field_names[3], (int) MotorState, MotorState);
      }
      if (hasMciState) {
        output.WriteEnum(2, field_names[1], (int) MciState, MciState);
      }
      if (hasMciConvergenceMet) {
        output.WriteBool(3, field_names[0], MciConvergenceMet);
      }
      if (hasRapidExceState) {
        output.WriteEnum(4, field_names[4], (int) RapidExceState, RapidExceState);
      }
      if (testSignals_.Count > 0) {
        output.WriteDoubleArray(5, field_names[5], testSignals_);
      }
      if (measuredForce_.Count > 0) {
        output.WriteDoubleArray(6, field_names[2], measuredForce_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMotorState) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MotorState);
      }
      if (hasMciState) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) MciState);
      }
      if (hasMciConvergenceMet) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, MciConvergenceMet);
      }
      if (hasRapidExceState) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) RapidExceState);
      }
      {
        int dataSize = 0;
        dataSize = 8 * testSignals_.Count;
        size += dataSize;
        size += 1 * testSignals_.Count;
      }
      {
        int dataSize = 0;
        dataSize = 8 * measuredForce_.Count;
        size += dataSize;
        size += 1 * measuredForce_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Feedback_Values ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Feedback_Values ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Feedback_Values ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Feedback_Values ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Feedback_Values ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Feedback_Values ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Feedback_Values ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Feedback_Values ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Feedback_Values ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Feedback_Values ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Feedback_Values MakeReadOnly() {
      testSignals_.MakeReadOnly();
      measuredForce_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Feedback_Values prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Feedback_Values, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Feedback_Values cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Feedback_Values result;
      
      private Feedback_Values PrepareBuilder() {
        if (resultIsReadOnly) {
          Feedback_Values original = result;
          result = new Feedback_Values();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Feedback_Values MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.interface.egm.Feedback_Values.Descriptor; }
      }
      
      public override Feedback_Values DefaultInstanceForType {
        get { return global::lth.interface.egm.Feedback_Values.DefaultInstance; }
      }
      
      public override Feedback_Values BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Feedback_Values) {
          return MergeFrom((Feedback_Values) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Feedback_Values other) {
        if (other == global::lth.interface.egm.Feedback_Values.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMotorState) {
          MotorState = other.MotorState;
        }
        if (other.HasMciState) {
          MciState = other.MciState;
        }
        if (other.HasMciConvergenceMet) {
          MciConvergenceMet = other.MciConvergenceMet;
        }
        if (other.HasRapidExceState) {
          RapidExceState = other.RapidExceState;
        }
        if (other.testSignals_.Count != 0) {
          result.testSignals_.Add(other.testSignals_);
        }
        if (other.measuredForce_.Count != 0) {
          result.measuredForce_.Add(other.measuredForce_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_feedbackValuesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _feedbackValuesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.motorState_, out unknown)) {
                result.hasMotorState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.mciState_, out unknown)) {
                result.hasMciState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasMciConvergenceMet = input.ReadBool(ref result.mciConvergenceMet_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.rapidExceState_, out unknown)) {
                result.hasRapidExceState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 42:
            case 41: {
              input.ReadDoubleArray(tag, field_name, result.testSignals_);
              break;
            }
            case 50:
            case 49: {
              input.ReadDoubleArray(tag, field_name, result.measuredForce_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMotorState {
       get { return result.hasMotorState; }
      }
      public global::lth.interface.egm.Feedback_Values.Types.MotorStateType MotorState {
        get { return result.MotorState; }
        set { SetMotorState(value); }
      }
      public Builder SetMotorState(global::lth.interface.egm.Feedback_Values.Types.MotorStateType value) {
        PrepareBuilder();
        result.hasMotorState = true;
        result.motorState_ = value;
        return this;
      }
      public Builder ClearMotorState() {
        PrepareBuilder();
        result.hasMotorState = false;
        result.motorState_ = global::lth.interface.egm.Feedback_Values.Types.MotorStateType.MOTORS_UNDEFINED;
        return this;
      }
      
      public bool HasMciState {
       get { return result.hasMciState; }
      }
      public global::lth.interface.egm.Feedback_Values.Types.MCIStateType MciState {
        get { return result.MciState; }
        set { SetMciState(value); }
      }
      public Builder SetMciState(global::lth.interface.egm.Feedback_Values.Types.MCIStateType value) {
        PrepareBuilder();
        result.hasMciState = true;
        result.mciState_ = value;
        return this;
      }
      public Builder ClearMciState() {
        PrepareBuilder();
        result.hasMciState = false;
        result.mciState_ = global::lth.interface.egm.Feedback_Values.Types.MCIStateType.MCI_UNDEFINED;
        return this;
      }
      
      public bool HasMciConvergenceMet {
        get { return result.hasMciConvergenceMet; }
      }
      public bool MciConvergenceMet {
        get { return result.MciConvergenceMet; }
        set { SetMciConvergenceMet(value); }
      }
      public Builder SetMciConvergenceMet(bool value) {
        PrepareBuilder();
        result.hasMciConvergenceMet = true;
        result.mciConvergenceMet_ = value;
        return this;
      }
      public Builder ClearMciConvergenceMet() {
        PrepareBuilder();
        result.hasMciConvergenceMet = false;
        result.mciConvergenceMet_ = false;
        return this;
      }
      
      public bool HasRapidExceState {
       get { return result.hasRapidExceState; }
      }
      public global::lth.interface.egm.Feedback_Values.Types.RapidCtrlExecStateType RapidExceState {
        get { return result.RapidExceState; }
        set { SetRapidExceState(value); }
      }
      public Builder SetRapidExceState(global::lth.interface.egm.Feedback_Values.Types.RapidCtrlExecStateType value) {
        PrepareBuilder();
        result.hasRapidExceState = true;
        result.rapidExceState_ = value;
        return this;
      }
      public Builder ClearRapidExceState() {
        PrepareBuilder();
        result.hasRapidExceState = false;
        result.rapidExceState_ = global::lth.interface.egm.Feedback_Values.Types.RapidCtrlExecStateType.RAPID_UNDEFINED;
        return this;
      }
      
      public pbc::IPopsicleList<double> TestSignalsList {
        get { return PrepareBuilder().testSignals_; }
      }
      public int TestSignalsCount {
        get { return result.TestSignalsCount; }
      }
      public double GetTestSignals(int index) {
        return result.GetTestSignals(index);
      }
      public Builder SetTestSignals(int index, double value) {
        PrepareBuilder();
        result.testSignals_[index] = value;
        return this;
      }
      public Builder AddTestSignals(double value) {
        PrepareBuilder();
        result.testSignals_.Add(value);
        return this;
      }
      public Builder AddRangeTestSignals(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.testSignals_.Add(values);
        return this;
      }
      public Builder ClearTestSignals() {
        PrepareBuilder();
        result.testSignals_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<double> MeasuredForceList {
        get { return PrepareBuilder().measuredForce_; }
      }
      public int MeasuredForceCount {
        get { return result.MeasuredForceCount; }
      }
      public double GetMeasuredForce(int index) {
        return result.GetMeasuredForce(index);
      }
      public Builder SetMeasuredForce(int index, double value) {
        PrepareBuilder();
        result.measuredForce_[index] = value;
        return this;
      }
      public Builder AddMeasuredForce(double value) {
        PrepareBuilder();
        result.measuredForce_.Add(value);
        return this;
      }
      public Builder AddRangeMeasuredForce(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.measuredForce_.Add(values);
        return this;
      }
      public Builder ClearMeasuredForce() {
        PrepareBuilder();
        result.measuredForce_.Clear();
        return this;
      }
    }
    static Feedback_Values() {
      object.ReferenceEquals(global::lth.interface.egm.LthEgmInterface.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EGM_Control : pb::GeneratedMessage<EGM_Control, EGM_Control.Builder> {
    private EGM_Control() { }
    private static readonly EGM_Control defaultInstance = new EGM_Control().MakeReadOnly();
    private static readonly string[] _eGMControlFieldNames = new string[] { "currentPosition", "desiredPosition", "feedback", "header", "plannedPosition" };
    private static readonly uint[] _eGMControlFieldTags = new uint[] { 26, 18, 42, 10, 34 };
    public static EGM_Control DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EGM_Control DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EGM_Control ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_EGM_Control__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EGM_Control, EGM_Control.Builder> InternalFieldAccessors {
      get { return global::lth.interface.egm.LthEgmInterface.internal__static_lth_interface_egm_EGM_Control__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::lth.interface.egm.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::lth.interface.egm.Header Header {
      get { return header_ ?? global::lth.interface.egm.Header.DefaultInstance; }
    }
    
    public const int DesiredPositionFieldNumber = 2;
    private bool hasDesiredPosition;
    private global::lth.interface.egm.Position_Values desiredPosition_;
    public bool HasDesiredPosition {
      get { return hasDesiredPosition; }
    }
    public global::lth.interface.egm.Position_Values DesiredPosition {
      get { return desiredPosition_ ?? global::lth.interface.egm.Position_Values.DefaultInstance; }
    }
    
    public const int CurrentPositionFieldNumber = 3;
    private bool hasCurrentPosition;
    private global::lth.interface.egm.Position_Values currentPosition_;
    public bool HasCurrentPosition {
      get { return hasCurrentPosition; }
    }
    public global::lth.interface.egm.Position_Values CurrentPosition {
      get { return currentPosition_ ?? global::lth.interface.egm.Position_Values.DefaultInstance; }
    }
    
    public const int PlannedPositionFieldNumber = 4;
    private bool hasPlannedPosition;
    private global::lth.interface.egm.Position_Values plannedPosition_;
    public bool HasPlannedPosition {
      get { return hasPlannedPosition; }
    }
    public global::lth.interface.egm.Position_Values PlannedPosition {
      get { return plannedPosition_ ?? global::lth.interface.egm.Position_Values.DefaultInstance; }
    }
    
    public const int FeedbackFieldNumber = 5;
    private bool hasFeedback;
    private global::lth.interface.egm.Feedback_Values feedback_;
    public bool HasFeedback {
      get { return hasFeedback; }
    }
    public global::lth.interface.egm.Feedback_Values Feedback {
      get { return feedback_ ?? global::lth.interface.egm.Feedback_Values.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (HasDesiredPosition) {
          if (!DesiredPosition.IsInitialized) return false;
        }
        if (HasCurrentPosition) {
          if (!CurrentPosition.IsInitialized) return false;
        }
        if (HasPlannedPosition) {
          if (!PlannedPosition.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _eGMControlFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[3], Header);
      }
      if (hasDesiredPosition) {
        output.WriteMessage(2, field_names[1], DesiredPosition);
      }
      if (hasCurrentPosition) {
        output.WriteMessage(3, field_names[0], CurrentPosition);
      }
      if (hasPlannedPosition) {
        output.WriteMessage(4, field_names[4], PlannedPosition);
      }
      if (hasFeedback) {
        output.WriteMessage(5, field_names[2], Feedback);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasDesiredPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, DesiredPosition);
      }
      if (hasCurrentPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, CurrentPosition);
      }
      if (hasPlannedPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, PlannedPosition);
      }
      if (hasFeedback) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Feedback);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EGM_Control ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EGM_Control ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EGM_Control ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EGM_Control ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EGM_Control ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EGM_Control ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EGM_Control ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EGM_Control ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EGM_Control ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EGM_Control ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EGM_Control MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EGM_Control prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EGM_Control, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EGM_Control cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EGM_Control result;
      
      private EGM_Control PrepareBuilder() {
        if (resultIsReadOnly) {
          EGM_Control original = result;
          result = new EGM_Control();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EGM_Control MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.interface.egm.EGM_Control.Descriptor; }
      }
      
      public override EGM_Control DefaultInstanceForType {
        get { return global::lth.interface.egm.EGM_Control.DefaultInstance; }
      }
      
      public override EGM_Control BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EGM_Control) {
          return MergeFrom((EGM_Control) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EGM_Control other) {
        if (other == global::lth.interface.egm.EGM_Control.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasDesiredPosition) {
          MergeDesiredPosition(other.DesiredPosition);
        }
        if (other.HasCurrentPosition) {
          MergeCurrentPosition(other.CurrentPosition);
        }
        if (other.HasPlannedPosition) {
          MergePlannedPosition(other.PlannedPosition);
        }
        if (other.HasFeedback) {
          MergeFeedback(other.Feedback);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_eGMControlFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _eGMControlFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::lth.interface.egm.Header.Builder subBuilder = global::lth.interface.egm.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::lth.interface.egm.Position_Values.Builder subBuilder = global::lth.interface.egm.Position_Values.CreateBuilder();
              if (result.hasDesiredPosition) {
                subBuilder.MergeFrom(DesiredPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DesiredPosition = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::lth.interface.egm.Position_Values.Builder subBuilder = global::lth.interface.egm.Position_Values.CreateBuilder();
              if (result.hasCurrentPosition) {
                subBuilder.MergeFrom(CurrentPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CurrentPosition = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::lth.interface.egm.Position_Values.Builder subBuilder = global::lth.interface.egm.Position_Values.CreateBuilder();
              if (result.hasPlannedPosition) {
                subBuilder.MergeFrom(PlannedPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlannedPosition = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::lth.interface.egm.Feedback_Values.Builder subBuilder = global::lth.interface.egm.Feedback_Values.CreateBuilder();
              if (result.hasFeedback) {
                subBuilder.MergeFrom(Feedback);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Feedback = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::lth.interface.egm.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::lth.interface.egm.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::lth.interface.egm.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::lth.interface.egm.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::lth.interface.egm.Header.DefaultInstance) {
            result.header_ = global::lth.interface.egm.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasDesiredPosition {
       get { return result.hasDesiredPosition; }
      }
      public global::lth.interface.egm.Position_Values DesiredPosition {
        get { return result.DesiredPosition; }
        set { SetDesiredPosition(value); }
      }
      public Builder SetDesiredPosition(global::lth.interface.egm.Position_Values value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesiredPosition = true;
        result.desiredPosition_ = value;
        return this;
      }
      public Builder SetDesiredPosition(global::lth.interface.egm.Position_Values.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDesiredPosition = true;
        result.desiredPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDesiredPosition(global::lth.interface.egm.Position_Values value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDesiredPosition &&
            result.desiredPosition_ != global::lth.interface.egm.Position_Values.DefaultInstance) {
            result.desiredPosition_ = global::lth.interface.egm.Position_Values.CreateBuilder(result.desiredPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.desiredPosition_ = value;
        }
        result.hasDesiredPosition = true;
        return this;
      }
      public Builder ClearDesiredPosition() {
        PrepareBuilder();
        result.hasDesiredPosition = false;
        result.desiredPosition_ = null;
        return this;
      }
      
      public bool HasCurrentPosition {
       get { return result.hasCurrentPosition; }
      }
      public global::lth.interface.egm.Position_Values CurrentPosition {
        get { return result.CurrentPosition; }
        set { SetCurrentPosition(value); }
      }
      public Builder SetCurrentPosition(global::lth.interface.egm.Position_Values value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentPosition = true;
        result.currentPosition_ = value;
        return this;
      }
      public Builder SetCurrentPosition(global::lth.interface.egm.Position_Values.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCurrentPosition = true;
        result.currentPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCurrentPosition(global::lth.interface.egm.Position_Values value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCurrentPosition &&
            result.currentPosition_ != global::lth.interface.egm.Position_Values.DefaultInstance) {
            result.currentPosition_ = global::lth.interface.egm.Position_Values.CreateBuilder(result.currentPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.currentPosition_ = value;
        }
        result.hasCurrentPosition = true;
        return this;
      }
      public Builder ClearCurrentPosition() {
        PrepareBuilder();
        result.hasCurrentPosition = false;
        result.currentPosition_ = null;
        return this;
      }
      
      public bool HasPlannedPosition {
       get { return result.hasPlannedPosition; }
      }
      public global::lth.interface.egm.Position_Values PlannedPosition {
        get { return result.PlannedPosition; }
        set { SetPlannedPosition(value); }
      }
      public Builder SetPlannedPosition(global::lth.interface.egm.Position_Values value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlannedPosition = true;
        result.plannedPosition_ = value;
        return this;
      }
      public Builder SetPlannedPosition(global::lth.interface.egm.Position_Values.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlannedPosition = true;
        result.plannedPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlannedPosition(global::lth.interface.egm.Position_Values value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlannedPosition &&
            result.plannedPosition_ != global::lth.interface.egm.Position_Values.DefaultInstance) {
            result.plannedPosition_ = global::lth.interface.egm.Position_Values.CreateBuilder(result.plannedPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.plannedPosition_ = value;
        }
        result.hasPlannedPosition = true;
        return this;
      }
      public Builder ClearPlannedPosition() {
        PrepareBuilder();
        result.hasPlannedPosition = false;
        result.plannedPosition_ = null;
        return this;
      }
      
      public bool HasFeedback {
       get { return result.hasFeedback; }
      }
      public global::lth.interface.egm.Feedback_Values Feedback {
        get { return result.Feedback; }
        set { SetFeedback(value); }
      }
      public Builder SetFeedback(global::lth.interface.egm.Feedback_Values value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFeedback = true;
        result.feedback_ = value;
        return this;
      }
      public Builder SetFeedback(global::lth.interface.egm.Feedback_Values.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFeedback = true;
        result.feedback_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFeedback(global::lth.interface.egm.Feedback_Values value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFeedback &&
            result.feedback_ != global::lth.interface.egm.Feedback_Values.DefaultInstance) {
            result.feedback_ = global::lth.interface.egm.Feedback_Values.CreateBuilder(result.feedback_).MergeFrom(value).BuildPartial();
        } else {
          result.feedback_ = value;
        }
        result.hasFeedback = true;
        return this;
      }
      public Builder ClearFeedback() {
        PrepareBuilder();
        result.hasFeedback = false;
        result.feedback_ = null;
        return this;
      }
    }
    static EGM_Control() {
      object.ReferenceEquals(global::lth.interface.egm.LthEgmInterface.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
