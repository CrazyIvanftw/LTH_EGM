// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace lth.egm {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LthEgm {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_lth_egm_Header__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.egm.Header, global::lth.egm.Header.Builder> internal__static_lth_egm_Header__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_lth_egm_Position__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.egm.Position, global::lth.egm.Position.Builder> internal__static_lth_egm_Position__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_lth_egm_EGM_Control__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::lth.egm.EGM_Control, global::lth.egm.EGM_Control.Builder> internal__static_lth_egm_EGM_Control__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static LthEgm() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1sdGhfZWdtLnByb3RvEgdsdGguZWdtItACCgZIZWFkZXISDQoFc2Vxbm8Y", 
            "ASABKA0SCgoCdG0YAiABKA0SPQoFbXR5cGUYAyABKA4yGy5sdGguZWdtLkhl", 
            "YWRlci5NZXNzYWdlVHlwZToRTVNHVFlQRV9VTkRFRklORUQSPAoEbW9kZRgE", 
            "IAEoDjIYLmx0aC5lZ20uSGVhZGVyLkVHTV9Nb2RlOhRNT0RFX1BPU0lUSU9O", 
            "X1NUUkVBTSJSCgtNZXNzYWdlVHlwZRIVChFNU0dUWVBFX1VOREVGSU5FRBAA", 
            "EhcKE01TR1RZUEVfUE9TX0NPTU1BTkQQARITCg9NU0dUWVBFX1BPU19BQ0sQ", 
            "AiJaCghFR01fTW9kZRIYChRNT0RFX1BPU0lUSU9OX1NUUkVBTRAAEhoKFk1P", 
            "REVfUE9TSVRJT05fR1VJREFOQ0UQARIYChRNT0RFX1BBVEhfQ09SUkVDVElP", 
            "ThACIisKCFBvc2l0aW9uEgkKAXgYASACKAESCQoBeRgCIAIoARIJCgF6GAMg", 
            "AigBIlMKC0VHTV9Db250cm9sEh8KBmhlYWRlchgBIAIoCzIPLmx0aC5lZ20u", 
          "SGVhZGVyEiMKCHBvc2l0aW9uGAIgAigLMhEubHRoLmVnbS5Qb3NpdGlvbg=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_lth_egm_Header__Descriptor = Descriptor.MessageTypes[0];
        internal__static_lth_egm_Header__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.egm.Header, global::lth.egm.Header.Builder>(internal__static_lth_egm_Header__Descriptor,
                new string[] { "Seqno", "Tm", "Mtype", "Mode", });
        internal__static_lth_egm_Position__Descriptor = Descriptor.MessageTypes[1];
        internal__static_lth_egm_Position__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.egm.Position, global::lth.egm.Position.Builder>(internal__static_lth_egm_Position__Descriptor,
                new string[] { "X", "Y", "Z", });
        internal__static_lth_egm_EGM_Control__Descriptor = Descriptor.MessageTypes[2];
        internal__static_lth_egm_EGM_Control__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::lth.egm.EGM_Control, global::lth.egm.EGM_Control.Builder>(internal__static_lth_egm_EGM_Control__Descriptor,
                new string[] { "Header", "Position", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Header : pb::GeneratedMessage<Header, Header.Builder> {
    private Header() { }
    private static readonly Header defaultInstance = new Header().MakeReadOnly();
    private static readonly string[] _headerFieldNames = new string[] { "mode", "mtype", "seqno", "tm" };
    private static readonly uint[] _headerFieldTags = new uint[] { 32, 24, 8, 16 };
    public static Header DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Header DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Header ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.egm.LthEgm.internal__static_lth_egm_Header__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Header, Header.Builder> InternalFieldAccessors {
      get { return global::lth.egm.LthEgm.internal__static_lth_egm_Header__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MessageType {
        MSGTYPE_UNDEFINED = 0,
        MSGTYPE_POS_COMMAND = 1,
        MSGTYPE_POS_ACK = 2,
      }
      
      public enum EGM_Mode {
        MODE_POSITION_STREAM = 0,
        MODE_POSITION_GUIDANCE = 1,
        MODE_PATH_CORRECTION = 2,
      }
      
    }
    #endregion
    
    public const int SeqnoFieldNumber = 1;
    private bool hasSeqno;
    private uint seqno_;
    public bool HasSeqno {
      get { return hasSeqno; }
    }
    [global::System.CLSCompliant(false)]
    public uint Seqno {
      get { return seqno_; }
    }
    
    public const int TmFieldNumber = 2;
    private bool hasTm;
    private uint tm_;
    public bool HasTm {
      get { return hasTm; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tm {
      get { return tm_; }
    }
    
    public const int MtypeFieldNumber = 3;
    private bool hasMtype;
    private global::lth.egm.Header.Types.MessageType mtype_ = global::lth.egm.Header.Types.MessageType.MSGTYPE_UNDEFINED;
    public bool HasMtype {
      get { return hasMtype; }
    }
    public global::lth.egm.Header.Types.MessageType Mtype {
      get { return mtype_; }
    }
    
    public const int ModeFieldNumber = 4;
    private bool hasMode;
    private global::lth.egm.Header.Types.EGM_Mode mode_ = global::lth.egm.Header.Types.EGM_Mode.MODE_POSITION_STREAM;
    public bool HasMode {
      get { return hasMode; }
    }
    public global::lth.egm.Header.Types.EGM_Mode Mode {
      get { return mode_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _headerFieldNames;
      if (hasSeqno) {
        output.WriteUInt32(1, field_names[2], Seqno);
      }
      if (hasTm) {
        output.WriteUInt32(2, field_names[3], Tm);
      }
      if (hasMtype) {
        output.WriteEnum(3, field_names[1], (int) Mtype, Mtype);
      }
      if (hasMode) {
        output.WriteEnum(4, field_names[0], (int) Mode, Mode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSeqno) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Seqno);
      }
      if (hasTm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Tm);
      }
      if (hasMtype) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Mtype);
      }
      if (hasMode) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Mode);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Header ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Header ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Header ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Header ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Header MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Header prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Header, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Header cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Header result;
      
      private Header PrepareBuilder() {
        if (resultIsReadOnly) {
          Header original = result;
          result = new Header();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Header MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.egm.Header.Descriptor; }
      }
      
      public override Header DefaultInstanceForType {
        get { return global::lth.egm.Header.DefaultInstance; }
      }
      
      public override Header BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Header) {
          return MergeFrom((Header) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Header other) {
        if (other == global::lth.egm.Header.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSeqno) {
          Seqno = other.Seqno;
        }
        if (other.HasTm) {
          Tm = other.Tm;
        }
        if (other.HasMtype) {
          Mtype = other.Mtype;
        }
        if (other.HasMode) {
          Mode = other.Mode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_headerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _headerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSeqno = input.ReadUInt32(ref result.seqno_);
              break;
            }
            case 16: {
              result.hasTm = input.ReadUInt32(ref result.tm_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.mtype_, out unknown)) {
                result.hasMtype = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.mode_, out unknown)) {
                result.hasMode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSeqno {
        get { return result.hasSeqno; }
      }
      [global::System.CLSCompliant(false)]
      public uint Seqno {
        get { return result.Seqno; }
        set { SetSeqno(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSeqno(uint value) {
        PrepareBuilder();
        result.hasSeqno = true;
        result.seqno_ = value;
        return this;
      }
      public Builder ClearSeqno() {
        PrepareBuilder();
        result.hasSeqno = false;
        result.seqno_ = 0;
        return this;
      }
      
      public bool HasTm {
        get { return result.hasTm; }
      }
      [global::System.CLSCompliant(false)]
      public uint Tm {
        get { return result.Tm; }
        set { SetTm(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTm(uint value) {
        PrepareBuilder();
        result.hasTm = true;
        result.tm_ = value;
        return this;
      }
      public Builder ClearTm() {
        PrepareBuilder();
        result.hasTm = false;
        result.tm_ = 0;
        return this;
      }
      
      public bool HasMtype {
       get { return result.hasMtype; }
      }
      public global::lth.egm.Header.Types.MessageType Mtype {
        get { return result.Mtype; }
        set { SetMtype(value); }
      }
      public Builder SetMtype(global::lth.egm.Header.Types.MessageType value) {
        PrepareBuilder();
        result.hasMtype = true;
        result.mtype_ = value;
        return this;
      }
      public Builder ClearMtype() {
        PrepareBuilder();
        result.hasMtype = false;
        result.mtype_ = global::lth.egm.Header.Types.MessageType.MSGTYPE_UNDEFINED;
        return this;
      }
      
      public bool HasMode {
       get { return result.hasMode; }
      }
      public global::lth.egm.Header.Types.EGM_Mode Mode {
        get { return result.Mode; }
        set { SetMode(value); }
      }
      public Builder SetMode(global::lth.egm.Header.Types.EGM_Mode value) {
        PrepareBuilder();
        result.hasMode = true;
        result.mode_ = value;
        return this;
      }
      public Builder ClearMode() {
        PrepareBuilder();
        result.hasMode = false;
        result.mode_ = global::lth.egm.Header.Types.EGM_Mode.MODE_POSITION_STREAM;
        return this;
      }
    }
    static Header() {
      object.ReferenceEquals(global::lth.egm.LthEgm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Position : pb::GeneratedMessage<Position, Position.Builder> {
    private Position() { }
    private static readonly Position defaultInstance = new Position().MakeReadOnly();
    private static readonly string[] _positionFieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _positionFieldTags = new uint[] { 9, 17, 25 };
    public static Position DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Position DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Position ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.egm.LthEgm.internal__static_lth_egm_Position__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Position, Position.Builder> InternalFieldAccessors {
      get { return global::lth.egm.LthEgm.internal__static_lth_egm_Position__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private double x_;
    public bool HasX {
      get { return hasX; }
    }
    public double X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private double y_;
    public bool HasY {
      get { return hasY; }
    }
    public double Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private double z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public double Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _positionFieldNames;
      if (hasX) {
        output.WriteDouble(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteDouble(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteDouble(3, field_names[2], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Z);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Position ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Position ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Position ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Position MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Position prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Position, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Position cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Position result;
      
      private Position PrepareBuilder() {
        if (resultIsReadOnly) {
          Position original = result;
          result = new Position();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Position MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.egm.Position.Descriptor; }
      }
      
      public override Position DefaultInstanceForType {
        get { return global::lth.egm.Position.DefaultInstance; }
      }
      
      public override Position BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Position) {
          return MergeFrom((Position) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Position other) {
        if (other == global::lth.egm.Position.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_positionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _positionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasX = input.ReadDouble(ref result.x_);
              break;
            }
            case 17: {
              result.hasY = input.ReadDouble(ref result.y_);
              break;
            }
            case 25: {
              result.hasZ = input.ReadDouble(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public double X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(double value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0D;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public double Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(double value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0D;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public double Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(double value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0D;
        return this;
      }
    }
    static Position() {
      object.ReferenceEquals(global::lth.egm.LthEgm.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class EGM_Control : pb::GeneratedMessage<EGM_Control, EGM_Control.Builder> {
    private EGM_Control() { }
    private static readonly EGM_Control defaultInstance = new EGM_Control().MakeReadOnly();
    private static readonly string[] _eGMControlFieldNames = new string[] { "header", "position" };
    private static readonly uint[] _eGMControlFieldTags = new uint[] { 10, 18 };
    public static EGM_Control DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EGM_Control DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EGM_Control ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::lth.egm.LthEgm.internal__static_lth_egm_EGM_Control__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EGM_Control, EGM_Control.Builder> InternalFieldAccessors {
      get { return global::lth.egm.LthEgm.internal__static_lth_egm_EGM_Control__FieldAccessorTable; }
    }
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::lth.egm.Header header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::lth.egm.Header Header {
      get { return header_ ?? global::lth.egm.Header.DefaultInstance; }
    }
    
    public const int PositionFieldNumber = 2;
    private bool hasPosition;
    private global::lth.egm.Position position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::lth.egm.Position Position {
      get { return position_ ?? global::lth.egm.Position.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!hasPosition) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _eGMControlFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[0], Header);
      }
      if (hasPosition) {
        output.WriteMessage(2, field_names[1], Position);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static EGM_Control ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EGM_Control ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EGM_Control ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EGM_Control ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EGM_Control ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EGM_Control ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EGM_Control ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EGM_Control ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EGM_Control ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EGM_Control ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EGM_Control MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EGM_Control prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<EGM_Control, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EGM_Control cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EGM_Control result;
      
      private EGM_Control PrepareBuilder() {
        if (resultIsReadOnly) {
          EGM_Control original = result;
          result = new EGM_Control();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EGM_Control MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::lth.egm.EGM_Control.Descriptor; }
      }
      
      public override EGM_Control DefaultInstanceForType {
        get { return global::lth.egm.EGM_Control.DefaultInstance; }
      }
      
      public override EGM_Control BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EGM_Control) {
          return MergeFrom((EGM_Control) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EGM_Control other) {
        if (other == global::lth.egm.EGM_Control.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_eGMControlFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _eGMControlFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::lth.egm.Header.Builder subBuilder = global::lth.egm.Header.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::lth.egm.Position.Builder subBuilder = global::lth.egm.Position.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::lth.egm.Header Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::lth.egm.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::lth.egm.Header.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::lth.egm.Header value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::lth.egm.Header.DefaultInstance) {
            result.header_ = global::lth.egm.Header.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::lth.egm.Position Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::lth.egm.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::lth.egm.Position.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::lth.egm.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::lth.egm.Position.DefaultInstance) {
            result.position_ = global::lth.egm.Position.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
    }
    static EGM_Control() {
      object.ReferenceEquals(global::lth.egm.LthEgm.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
