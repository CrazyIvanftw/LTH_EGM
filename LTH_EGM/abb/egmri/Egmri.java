// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egmri.proto

package abb.egmri;

public final class Egmri {
  private Egmri() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface EgmriHeaderOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional uint32 seqno = 1;
    boolean hasSeqno();
    int getSeqno();
    
    // optional uint32 tm = 2;
    boolean hasTm();
    int getTm();
    
    // optional .abb.egmri.EgmriHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
    boolean hasMtype();
    abb.egmri.Egmri.EgmriHeader.MessageType getMtype();
  }
  public static final class EgmriHeader extends
      com.google.protobuf.GeneratedMessage
      implements EgmriHeaderOrBuilder {
    // Use EgmriHeader.newBuilder() to construct.
    private EgmriHeader(Builder builder) {
      super(builder);
    }
    private EgmriHeader(boolean noInit) {}
    
    private static final EgmriHeader defaultInstance;
    public static EgmriHeader getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriHeader getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriHeader_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriHeader_fieldAccessorTable;
    }
    
    public enum MessageType
        implements com.google.protobuf.ProtocolMessageEnum {
      MSGTYPE_UNDEFINED(0, 0),
      MSGTYPE_COMMAND(1, 1),
      MSGTYPE_DATA(2, 2),
      MSGTYPE_CORRECTION(3, 3),
      ;
      
      public static final int MSGTYPE_UNDEFINED_VALUE = 0;
      public static final int MSGTYPE_COMMAND_VALUE = 1;
      public static final int MSGTYPE_DATA_VALUE = 2;
      public static final int MSGTYPE_CORRECTION_VALUE = 3;
      
      
      public final int getNumber() { return value; }
      
      public static MessageType valueOf(int value) {
        switch (value) {
          case 0: return MSGTYPE_UNDEFINED;
          case 1: return MSGTYPE_COMMAND;
          case 2: return MSGTYPE_DATA;
          case 3: return MSGTYPE_CORRECTION;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MessageType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
              public MessageType findValueByNumber(int number) {
                return MessageType.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return abb.egmri.Egmri.EgmriHeader.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final MessageType[] VALUES = {
        MSGTYPE_UNDEFINED, MSGTYPE_COMMAND, MSGTYPE_DATA, MSGTYPE_CORRECTION, 
      };
      
      public static MessageType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private MessageType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:abb.egmri.EgmriHeader.MessageType)
    }
    
    private int bitField0_;
    // optional uint32 seqno = 1;
    public static final int SEQNO_FIELD_NUMBER = 1;
    private int seqno_;
    public boolean hasSeqno() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getSeqno() {
      return seqno_;
    }
    
    // optional uint32 tm = 2;
    public static final int TM_FIELD_NUMBER = 2;
    private int tm_;
    public boolean hasTm() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getTm() {
      return tm_;
    }
    
    // optional .abb.egmri.EgmriHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
    public static final int MTYPE_FIELD_NUMBER = 3;
    private abb.egmri.Egmri.EgmriHeader.MessageType mtype_;
    public boolean hasMtype() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public abb.egmri.Egmri.EgmriHeader.MessageType getMtype() {
      return mtype_;
    }
    
    private void initFields() {
      seqno_ = 0;
      tm_ = 0;
      mtype_ = abb.egmri.Egmri.EgmriHeader.MessageType.MSGTYPE_UNDEFINED;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, seqno_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, tm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, mtype_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, seqno_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, tm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, mtype_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriHeader parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriHeader parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriHeader parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriHeader parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriHeader parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriHeader parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriHeader parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriHeader parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriHeader parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriHeader parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriHeader prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriHeaderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriHeader_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriHeader_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriHeader.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        seqno_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        tm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mtype_ = abb.egmri.Egmri.EgmriHeader.MessageType.MSGTYPE_UNDEFINED;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriHeader.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriHeader getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriHeader.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriHeader build() {
        abb.egmri.Egmri.EgmriHeader result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriHeader buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriHeader result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriHeader buildPartial() {
        abb.egmri.Egmri.EgmriHeader result = new abb.egmri.Egmri.EgmriHeader(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.seqno_ = seqno_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.tm_ = tm_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mtype_ = mtype_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriHeader) {
          return mergeFrom((abb.egmri.Egmri.EgmriHeader)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriHeader other) {
        if (other == abb.egmri.Egmri.EgmriHeader.getDefaultInstance()) return this;
        if (other.hasSeqno()) {
          setSeqno(other.getSeqno());
        }
        if (other.hasTm()) {
          setTm(other.getTm());
        }
        if (other.hasMtype()) {
          setMtype(other.getMtype());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              seqno_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              tm_ = input.readUInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              abb.egmri.Egmri.EgmriHeader.MessageType value = abb.egmri.Egmri.EgmriHeader.MessageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                mtype_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional uint32 seqno = 1;
      private int seqno_ ;
      public boolean hasSeqno() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getSeqno() {
        return seqno_;
      }
      public Builder setSeqno(int value) {
        bitField0_ |= 0x00000001;
        seqno_ = value;
        onChanged();
        return this;
      }
      public Builder clearSeqno() {
        bitField0_ = (bitField0_ & ~0x00000001);
        seqno_ = 0;
        onChanged();
        return this;
      }
      
      // optional uint32 tm = 2;
      private int tm_ ;
      public boolean hasTm() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getTm() {
        return tm_;
      }
      public Builder setTm(int value) {
        bitField0_ |= 0x00000002;
        tm_ = value;
        onChanged();
        return this;
      }
      public Builder clearTm() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tm_ = 0;
        onChanged();
        return this;
      }
      
      // optional .abb.egmri.EgmriHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
      private abb.egmri.Egmri.EgmriHeader.MessageType mtype_ = abb.egmri.Egmri.EgmriHeader.MessageType.MSGTYPE_UNDEFINED;
      public boolean hasMtype() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public abb.egmri.Egmri.EgmriHeader.MessageType getMtype() {
        return mtype_;
      }
      public Builder setMtype(abb.egmri.Egmri.EgmriHeader.MessageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        mtype_ = value;
        onChanged();
        return this;
      }
      public Builder clearMtype() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mtype_ = abb.egmri.Egmri.EgmriHeader.MessageType.MSGTYPE_UNDEFINED;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriHeader)
    }
    
    static {
      defaultInstance = new EgmriHeader(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriHeader)
  }
  
  public interface EgmriCartesianOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required float x = 1;
    boolean hasX();
    float getX();
    
    // required float y = 2;
    boolean hasY();
    float getY();
    
    // required float z = 3;
    boolean hasZ();
    float getZ();
  }
  public static final class EgmriCartesian extends
      com.google.protobuf.GeneratedMessage
      implements EgmriCartesianOrBuilder {
    // Use EgmriCartesian.newBuilder() to construct.
    private EgmriCartesian(Builder builder) {
      super(builder);
    }
    private EgmriCartesian(boolean noInit) {}
    
    private static final EgmriCartesian defaultInstance;
    public static EgmriCartesian getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriCartesian getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriCartesian_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriCartesian_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required float x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private float x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public float getX() {
      return x_;
    }
    
    // required float y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private float y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public float getY() {
      return y_;
    }
    
    // required float z = 3;
    public static final int Z_FIELD_NUMBER = 3;
    private float z_;
    public boolean hasZ() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public float getZ() {
      return z_;
    }
    
    private void initFields() {
      x_ = 0F;
      y_ = 0F;
      z_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, z_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, z_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriCartesian parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriCartesian parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriCartesian parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriCartesian parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriCartesian parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriCartesian parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriCartesian parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriCartesian parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriCartesian parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriCartesian parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriCartesian prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriCartesianOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriCartesian_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriCartesian_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriCartesian.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        z_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriCartesian.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriCartesian getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriCartesian.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriCartesian build() {
        abb.egmri.Egmri.EgmriCartesian result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriCartesian buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriCartesian result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriCartesian buildPartial() {
        abb.egmri.Egmri.EgmriCartesian result = new abb.egmri.Egmri.EgmriCartesian(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.z_ = z_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriCartesian) {
          return mergeFrom((abb.egmri.Egmri.EgmriCartesian)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriCartesian other) {
        if (other == abb.egmri.Egmri.EgmriCartesian.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasZ()) {
          setZ(other.getZ());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasZ()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              x_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              y_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              z_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required float x = 1;
      private float x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public float getX() {
        return x_;
      }
      public Builder setX(float value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0F;
        onChanged();
        return this;
      }
      
      // required float y = 2;
      private float y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getY() {
        return y_;
      }
      public Builder setY(float value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0F;
        onChanged();
        return this;
      }
      
      // required float z = 3;
      private float z_ ;
      public boolean hasZ() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public float getZ() {
        return z_;
      }
      public Builder setZ(float value) {
        bitField0_ |= 0x00000004;
        z_ = value;
        onChanged();
        return this;
      }
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        z_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriCartesian)
    }
    
    static {
      defaultInstance = new EgmriCartesian(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriCartesian)
  }
  
  public interface EgmriQuaternionOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required float u0 = 1;
    boolean hasU0();
    float getU0();
    
    // required float u1 = 2;
    boolean hasU1();
    float getU1();
    
    // required float u2 = 3;
    boolean hasU2();
    float getU2();
    
    // required float u3 = 4;
    boolean hasU3();
    float getU3();
  }
  public static final class EgmriQuaternion extends
      com.google.protobuf.GeneratedMessage
      implements EgmriQuaternionOrBuilder {
    // Use EgmriQuaternion.newBuilder() to construct.
    private EgmriQuaternion(Builder builder) {
      super(builder);
    }
    private EgmriQuaternion(boolean noInit) {}
    
    private static final EgmriQuaternion defaultInstance;
    public static EgmriQuaternion getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriQuaternion getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriQuaternion_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriQuaternion_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required float u0 = 1;
    public static final int U0_FIELD_NUMBER = 1;
    private float u0_;
    public boolean hasU0() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public float getU0() {
      return u0_;
    }
    
    // required float u1 = 2;
    public static final int U1_FIELD_NUMBER = 2;
    private float u1_;
    public boolean hasU1() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public float getU1() {
      return u1_;
    }
    
    // required float u2 = 3;
    public static final int U2_FIELD_NUMBER = 3;
    private float u2_;
    public boolean hasU2() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public float getU2() {
      return u2_;
    }
    
    // required float u3 = 4;
    public static final int U3_FIELD_NUMBER = 4;
    private float u3_;
    public boolean hasU3() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public float getU3() {
      return u3_;
    }
    
    private void initFields() {
      u0_ = 0F;
      u1_ = 0F;
      u2_ = 0F;
      u3_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasU0()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasU1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasU2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasU3()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, u0_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, u1_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, u2_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, u3_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, u0_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, u1_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, u2_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, u3_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriQuaternion parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriQuaternion parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriQuaternion parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriQuaternion parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriQuaternion parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriQuaternion parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriQuaternion parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriQuaternion parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriQuaternion parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriQuaternion parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriQuaternion prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriQuaternionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriQuaternion_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriQuaternion_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriQuaternion.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        u0_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        u1_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        u2_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        u3_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriQuaternion.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriQuaternion getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriQuaternion.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriQuaternion build() {
        abb.egmri.Egmri.EgmriQuaternion result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriQuaternion buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriQuaternion result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriQuaternion buildPartial() {
        abb.egmri.Egmri.EgmriQuaternion result = new abb.egmri.Egmri.EgmriQuaternion(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.u0_ = u0_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.u1_ = u1_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.u2_ = u2_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.u3_ = u3_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriQuaternion) {
          return mergeFrom((abb.egmri.Egmri.EgmriQuaternion)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriQuaternion other) {
        if (other == abb.egmri.Egmri.EgmriQuaternion.getDefaultInstance()) return this;
        if (other.hasU0()) {
          setU0(other.getU0());
        }
        if (other.hasU1()) {
          setU1(other.getU1());
        }
        if (other.hasU2()) {
          setU2(other.getU2());
        }
        if (other.hasU3()) {
          setU3(other.getU3());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasU0()) {
          
          return false;
        }
        if (!hasU1()) {
          
          return false;
        }
        if (!hasU2()) {
          
          return false;
        }
        if (!hasU3()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              u0_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              u1_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              u2_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              u3_ = input.readFloat();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required float u0 = 1;
      private float u0_ ;
      public boolean hasU0() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public float getU0() {
        return u0_;
      }
      public Builder setU0(float value) {
        bitField0_ |= 0x00000001;
        u0_ = value;
        onChanged();
        return this;
      }
      public Builder clearU0() {
        bitField0_ = (bitField0_ & ~0x00000001);
        u0_ = 0F;
        onChanged();
        return this;
      }
      
      // required float u1 = 2;
      private float u1_ ;
      public boolean hasU1() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getU1() {
        return u1_;
      }
      public Builder setU1(float value) {
        bitField0_ |= 0x00000002;
        u1_ = value;
        onChanged();
        return this;
      }
      public Builder clearU1() {
        bitField0_ = (bitField0_ & ~0x00000002);
        u1_ = 0F;
        onChanged();
        return this;
      }
      
      // required float u2 = 3;
      private float u2_ ;
      public boolean hasU2() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public float getU2() {
        return u2_;
      }
      public Builder setU2(float value) {
        bitField0_ |= 0x00000004;
        u2_ = value;
        onChanged();
        return this;
      }
      public Builder clearU2() {
        bitField0_ = (bitField0_ & ~0x00000004);
        u2_ = 0F;
        onChanged();
        return this;
      }
      
      // required float u3 = 4;
      private float u3_ ;
      public boolean hasU3() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public float getU3() {
        return u3_;
      }
      public Builder setU3(float value) {
        bitField0_ |= 0x00000008;
        u3_ = value;
        onChanged();
        return this;
      }
      public Builder clearU3() {
        bitField0_ = (bitField0_ & ~0x00000008);
        u3_ = 0F;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriQuaternion)
    }
    
    static {
      defaultInstance = new EgmriQuaternion(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriQuaternion)
  }
  
  public interface EgmriPoseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .abb.egmri.EgmriCartesian position = 1;
    boolean hasPosition();
    abb.egmri.Egmri.EgmriCartesian getPosition();
    abb.egmri.Egmri.EgmriCartesianOrBuilder getPositionOrBuilder();
    
    // optional .abb.egmri.EgmriQuaternion orientation = 2;
    boolean hasOrientation();
    abb.egmri.Egmri.EgmriQuaternion getOrientation();
    abb.egmri.Egmri.EgmriQuaternionOrBuilder getOrientationOrBuilder();
  }
  public static final class EgmriPose extends
      com.google.protobuf.GeneratedMessage
      implements EgmriPoseOrBuilder {
    // Use EgmriPose.newBuilder() to construct.
    private EgmriPose(Builder builder) {
      super(builder);
    }
    private EgmriPose(boolean noInit) {}
    
    private static final EgmriPose defaultInstance;
    public static EgmriPose getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriPose getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPose_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPose_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .abb.egmri.EgmriCartesian position = 1;
    public static final int POSITION_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriCartesian position_;
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriCartesian getPosition() {
      return position_;
    }
    public abb.egmri.Egmri.EgmriCartesianOrBuilder getPositionOrBuilder() {
      return position_;
    }
    
    // optional .abb.egmri.EgmriQuaternion orientation = 2;
    public static final int ORIENTATION_FIELD_NUMBER = 2;
    private abb.egmri.Egmri.EgmriQuaternion orientation_;
    public boolean hasOrientation() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public abb.egmri.Egmri.EgmriQuaternion getOrientation() {
      return orientation_;
    }
    public abb.egmri.Egmri.EgmriQuaternionOrBuilder getOrientationOrBuilder() {
      return orientation_;
    }
    
    private void initFields() {
      position_ = abb.egmri.Egmri.EgmriCartesian.getDefaultInstance();
      orientation_ = abb.egmri.Egmri.EgmriQuaternion.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasPosition()) {
        if (!getPosition().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasOrientation()) {
        if (!getOrientation().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, orientation_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, orientation_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriPose parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPose parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPose parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPose parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPose parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPose parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPose parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriPose parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriPose parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPose parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriPose prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriPoseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPose_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPose_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriPose.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPositionFieldBuilder();
          getOrientationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (positionBuilder_ == null) {
          position_ = abb.egmri.Egmri.EgmriCartesian.getDefaultInstance();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (orientationBuilder_ == null) {
          orientation_ = abb.egmri.Egmri.EgmriQuaternion.getDefaultInstance();
        } else {
          orientationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriPose.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriPose getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriPose.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriPose build() {
        abb.egmri.Egmri.EgmriPose result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriPose buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriPose result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriPose buildPartial() {
        abb.egmri.Egmri.EgmriPose result = new abb.egmri.Egmri.EgmriPose(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (positionBuilder_ == null) {
          result.position_ = position_;
        } else {
          result.position_ = positionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (orientationBuilder_ == null) {
          result.orientation_ = orientation_;
        } else {
          result.orientation_ = orientationBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriPose) {
          return mergeFrom((abb.egmri.Egmri.EgmriPose)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriPose other) {
        if (other == abb.egmri.Egmri.EgmriPose.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasOrientation()) {
          mergeOrientation(other.getOrientation());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasPosition()) {
          if (!getPosition().isInitialized()) {
            
            return false;
          }
        }
        if (hasOrientation()) {
          if (!getOrientation().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              abb.egmri.Egmri.EgmriCartesian.Builder subBuilder = abb.egmri.Egmri.EgmriCartesian.newBuilder();
              if (hasPosition()) {
                subBuilder.mergeFrom(getPosition());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPosition(subBuilder.buildPartial());
              break;
            }
            case 18: {
              abb.egmri.Egmri.EgmriQuaternion.Builder subBuilder = abb.egmri.Egmri.EgmriQuaternion.newBuilder();
              if (hasOrientation()) {
                subBuilder.mergeFrom(getOrientation());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOrientation(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .abb.egmri.EgmriCartesian position = 1;
      private abb.egmri.Egmri.EgmriCartesian position_ = abb.egmri.Egmri.EgmriCartesian.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriCartesian, abb.egmri.Egmri.EgmriCartesian.Builder, abb.egmri.Egmri.EgmriCartesianOrBuilder> positionBuilder_;
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriCartesian getPosition() {
        if (positionBuilder_ == null) {
          return position_;
        } else {
          return positionBuilder_.getMessage();
        }
      }
      public Builder setPosition(abb.egmri.Egmri.EgmriCartesian value) {
        if (positionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          position_ = value;
          onChanged();
        } else {
          positionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setPosition(
          abb.egmri.Egmri.EgmriCartesian.Builder builderForValue) {
        if (positionBuilder_ == null) {
          position_ = builderForValue.build();
          onChanged();
        } else {
          positionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergePosition(abb.egmri.Egmri.EgmriCartesian value) {
        if (positionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              position_ != abb.egmri.Egmri.EgmriCartesian.getDefaultInstance()) {
            position_ =
              abb.egmri.Egmri.EgmriCartesian.newBuilder(position_).mergeFrom(value).buildPartial();
          } else {
            position_ = value;
          }
          onChanged();
        } else {
          positionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearPosition() {
        if (positionBuilder_ == null) {
          position_ = abb.egmri.Egmri.EgmriCartesian.getDefaultInstance();
          onChanged();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public abb.egmri.Egmri.EgmriCartesian.Builder getPositionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPositionFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriCartesianOrBuilder getPositionOrBuilder() {
        if (positionBuilder_ != null) {
          return positionBuilder_.getMessageOrBuilder();
        } else {
          return position_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriCartesian, abb.egmri.Egmri.EgmriCartesian.Builder, abb.egmri.Egmri.EgmriCartesianOrBuilder> 
          getPositionFieldBuilder() {
        if (positionBuilder_ == null) {
          positionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriCartesian, abb.egmri.Egmri.EgmriCartesian.Builder, abb.egmri.Egmri.EgmriCartesianOrBuilder>(
                  position_,
                  getParentForChildren(),
                  isClean());
          position_ = null;
        }
        return positionBuilder_;
      }
      
      // optional .abb.egmri.EgmriQuaternion orientation = 2;
      private abb.egmri.Egmri.EgmriQuaternion orientation_ = abb.egmri.Egmri.EgmriQuaternion.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriQuaternion, abb.egmri.Egmri.EgmriQuaternion.Builder, abb.egmri.Egmri.EgmriQuaternionOrBuilder> orientationBuilder_;
      public boolean hasOrientation() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public abb.egmri.Egmri.EgmriQuaternion getOrientation() {
        if (orientationBuilder_ == null) {
          return orientation_;
        } else {
          return orientationBuilder_.getMessage();
        }
      }
      public Builder setOrientation(abb.egmri.Egmri.EgmriQuaternion value) {
        if (orientationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          orientation_ = value;
          onChanged();
        } else {
          orientationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setOrientation(
          abb.egmri.Egmri.EgmriQuaternion.Builder builderForValue) {
        if (orientationBuilder_ == null) {
          orientation_ = builderForValue.build();
          onChanged();
        } else {
          orientationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeOrientation(abb.egmri.Egmri.EgmriQuaternion value) {
        if (orientationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              orientation_ != abb.egmri.Egmri.EgmriQuaternion.getDefaultInstance()) {
            orientation_ =
              abb.egmri.Egmri.EgmriQuaternion.newBuilder(orientation_).mergeFrom(value).buildPartial();
          } else {
            orientation_ = value;
          }
          onChanged();
        } else {
          orientationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearOrientation() {
        if (orientationBuilder_ == null) {
          orientation_ = abb.egmri.Egmri.EgmriQuaternion.getDefaultInstance();
          onChanged();
        } else {
          orientationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public abb.egmri.Egmri.EgmriQuaternion.Builder getOrientationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getOrientationFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriQuaternionOrBuilder getOrientationOrBuilder() {
        if (orientationBuilder_ != null) {
          return orientationBuilder_.getMessageOrBuilder();
        } else {
          return orientation_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriQuaternion, abb.egmri.Egmri.EgmriQuaternion.Builder, abb.egmri.Egmri.EgmriQuaternionOrBuilder> 
          getOrientationFieldBuilder() {
        if (orientationBuilder_ == null) {
          orientationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriQuaternion, abb.egmri.Egmri.EgmriQuaternion.Builder, abb.egmri.Egmri.EgmriQuaternionOrBuilder>(
                  orientation_,
                  getParentForChildren(),
                  isClean());
          orientation_ = null;
        }
        return orientationBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriPose)
    }
    
    static {
      defaultInstance = new EgmriPose(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriPose)
  }
  
  public interface EgmriJointsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated float joints = 1;
    java.util.List<java.lang.Float> getJointsList();
    int getJointsCount();
    float getJoints(int index);
  }
  public static final class EgmriJoints extends
      com.google.protobuf.GeneratedMessage
      implements EgmriJointsOrBuilder {
    // Use EgmriJoints.newBuilder() to construct.
    private EgmriJoints(Builder builder) {
      super(builder);
    }
    private EgmriJoints(boolean noInit) {}
    
    private static final EgmriJoints defaultInstance;
    public static EgmriJoints getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriJoints getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriJoints_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriJoints_fieldAccessorTable;
    }
    
    // repeated float joints = 1;
    public static final int JOINTS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Float> joints_;
    public java.util.List<java.lang.Float>
        getJointsList() {
      return joints_;
    }
    public int getJointsCount() {
      return joints_.size();
    }
    public float getJoints(int index) {
      return joints_.get(index);
    }
    
    private void initFields() {
      joints_ = java.util.Collections.emptyList();;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < joints_.size(); i++) {
        output.writeFloat(1, joints_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        dataSize = 4 * getJointsList().size();
        size += dataSize;
        size += 1 * getJointsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriJoints parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJoints parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJoints parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJoints parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJoints parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJoints parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJoints parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriJoints parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriJoints parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJoints parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriJoints prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriJointsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriJoints_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriJoints_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriJoints.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        joints_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriJoints.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriJoints getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriJoints.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriJoints build() {
        abb.egmri.Egmri.EgmriJoints result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriJoints buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriJoints result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriJoints buildPartial() {
        abb.egmri.Egmri.EgmriJoints result = new abb.egmri.Egmri.EgmriJoints(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          joints_ = java.util.Collections.unmodifiableList(joints_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.joints_ = joints_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriJoints) {
          return mergeFrom((abb.egmri.Egmri.EgmriJoints)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriJoints other) {
        if (other == abb.egmri.Egmri.EgmriJoints.getDefaultInstance()) return this;
        if (!other.joints_.isEmpty()) {
          if (joints_.isEmpty()) {
            joints_ = other.joints_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureJointsIsMutable();
            joints_.addAll(other.joints_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 13: {
              ensureJointsIsMutable();
              joints_.add(input.readFloat());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addJoints(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated float joints = 1;
      private java.util.List<java.lang.Float> joints_ = java.util.Collections.emptyList();;
      private void ensureJointsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          joints_ = new java.util.ArrayList<java.lang.Float>(joints_);
          bitField0_ |= 0x00000001;
         }
      }
      public java.util.List<java.lang.Float>
          getJointsList() {
        return java.util.Collections.unmodifiableList(joints_);
      }
      public int getJointsCount() {
        return joints_.size();
      }
      public float getJoints(int index) {
        return joints_.get(index);
      }
      public Builder setJoints(
          int index, float value) {
        ensureJointsIsMutable();
        joints_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addJoints(float value) {
        ensureJointsIsMutable();
        joints_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllJoints(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureJointsIsMutable();
        super.addAll(values, joints_);
        onChanged();
        return this;
      }
      public Builder clearJoints() {
        joints_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriJoints)
    }
    
    static {
      defaultInstance = new EgmriJoints(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriJoints)
  }
  
  public interface EgmriJointSpaceOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .abb.egmri.EgmriJoints joints = 1;
    boolean hasJoints();
    abb.egmri.Egmri.EgmriJoints getJoints();
    abb.egmri.Egmri.EgmriJointsOrBuilder getJointsOrBuilder();
    
    // optional .abb.egmri.EgmriJoints externalJoints = 2;
    boolean hasExternalJoints();
    abb.egmri.Egmri.EgmriJoints getExternalJoints();
    abb.egmri.Egmri.EgmriJointsOrBuilder getExternalJointsOrBuilder();
  }
  public static final class EgmriJointSpace extends
      com.google.protobuf.GeneratedMessage
      implements EgmriJointSpaceOrBuilder {
    // Use EgmriJointSpace.newBuilder() to construct.
    private EgmriJointSpace(Builder builder) {
      super(builder);
    }
    private EgmriJointSpace(boolean noInit) {}
    
    private static final EgmriJointSpace defaultInstance;
    public static EgmriJointSpace getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriJointSpace getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriJointSpace_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriJointSpace_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .abb.egmri.EgmriJoints joints = 1;
    public static final int JOINTS_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriJoints joints_;
    public boolean hasJoints() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriJoints getJoints() {
      return joints_;
    }
    public abb.egmri.Egmri.EgmriJointsOrBuilder getJointsOrBuilder() {
      return joints_;
    }
    
    // optional .abb.egmri.EgmriJoints externalJoints = 2;
    public static final int EXTERNALJOINTS_FIELD_NUMBER = 2;
    private abb.egmri.Egmri.EgmriJoints externalJoints_;
    public boolean hasExternalJoints() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public abb.egmri.Egmri.EgmriJoints getExternalJoints() {
      return externalJoints_;
    }
    public abb.egmri.Egmri.EgmriJointsOrBuilder getExternalJointsOrBuilder() {
      return externalJoints_;
    }
    
    private void initFields() {
      joints_ = abb.egmri.Egmri.EgmriJoints.getDefaultInstance();
      externalJoints_ = abb.egmri.Egmri.EgmriJoints.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, joints_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, externalJoints_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, joints_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, externalJoints_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriJointSpace parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJointSpace parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJointSpace parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJointSpace parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJointSpace parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJointSpace parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJointSpace parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriJointSpace parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriJointSpace parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriJointSpace parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriJointSpace prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriJointSpaceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriJointSpace_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriJointSpace_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriJointSpace.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getJointsFieldBuilder();
          getExternalJointsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (jointsBuilder_ == null) {
          joints_ = abb.egmri.Egmri.EgmriJoints.getDefaultInstance();
        } else {
          jointsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (externalJointsBuilder_ == null) {
          externalJoints_ = abb.egmri.Egmri.EgmriJoints.getDefaultInstance();
        } else {
          externalJointsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriJointSpace.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriJointSpace getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriJointSpace build() {
        abb.egmri.Egmri.EgmriJointSpace result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriJointSpace buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriJointSpace result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriJointSpace buildPartial() {
        abb.egmri.Egmri.EgmriJointSpace result = new abb.egmri.Egmri.EgmriJointSpace(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (jointsBuilder_ == null) {
          result.joints_ = joints_;
        } else {
          result.joints_ = jointsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (externalJointsBuilder_ == null) {
          result.externalJoints_ = externalJoints_;
        } else {
          result.externalJoints_ = externalJointsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriJointSpace) {
          return mergeFrom((abb.egmri.Egmri.EgmriJointSpace)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriJointSpace other) {
        if (other == abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) return this;
        if (other.hasJoints()) {
          mergeJoints(other.getJoints());
        }
        if (other.hasExternalJoints()) {
          mergeExternalJoints(other.getExternalJoints());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              abb.egmri.Egmri.EgmriJoints.Builder subBuilder = abb.egmri.Egmri.EgmriJoints.newBuilder();
              if (hasJoints()) {
                subBuilder.mergeFrom(getJoints());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJoints(subBuilder.buildPartial());
              break;
            }
            case 18: {
              abb.egmri.Egmri.EgmriJoints.Builder subBuilder = abb.egmri.Egmri.EgmriJoints.newBuilder();
              if (hasExternalJoints()) {
                subBuilder.mergeFrom(getExternalJoints());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setExternalJoints(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .abb.egmri.EgmriJoints joints = 1;
      private abb.egmri.Egmri.EgmriJoints joints_ = abb.egmri.Egmri.EgmriJoints.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJoints, abb.egmri.Egmri.EgmriJoints.Builder, abb.egmri.Egmri.EgmriJointsOrBuilder> jointsBuilder_;
      public boolean hasJoints() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriJoints getJoints() {
        if (jointsBuilder_ == null) {
          return joints_;
        } else {
          return jointsBuilder_.getMessage();
        }
      }
      public Builder setJoints(abb.egmri.Egmri.EgmriJoints value) {
        if (jointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          joints_ = value;
          onChanged();
        } else {
          jointsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setJoints(
          abb.egmri.Egmri.EgmriJoints.Builder builderForValue) {
        if (jointsBuilder_ == null) {
          joints_ = builderForValue.build();
          onChanged();
        } else {
          jointsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeJoints(abb.egmri.Egmri.EgmriJoints value) {
        if (jointsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              joints_ != abb.egmri.Egmri.EgmriJoints.getDefaultInstance()) {
            joints_ =
              abb.egmri.Egmri.EgmriJoints.newBuilder(joints_).mergeFrom(value).buildPartial();
          } else {
            joints_ = value;
          }
          onChanged();
        } else {
          jointsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearJoints() {
        if (jointsBuilder_ == null) {
          joints_ = abb.egmri.Egmri.EgmriJoints.getDefaultInstance();
          onChanged();
        } else {
          jointsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public abb.egmri.Egmri.EgmriJoints.Builder getJointsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getJointsFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointsOrBuilder getJointsOrBuilder() {
        if (jointsBuilder_ != null) {
          return jointsBuilder_.getMessageOrBuilder();
        } else {
          return joints_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJoints, abb.egmri.Egmri.EgmriJoints.Builder, abb.egmri.Egmri.EgmriJointsOrBuilder> 
          getJointsFieldBuilder() {
        if (jointsBuilder_ == null) {
          jointsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJoints, abb.egmri.Egmri.EgmriJoints.Builder, abb.egmri.Egmri.EgmriJointsOrBuilder>(
                  joints_,
                  getParentForChildren(),
                  isClean());
          joints_ = null;
        }
        return jointsBuilder_;
      }
      
      // optional .abb.egmri.EgmriJoints externalJoints = 2;
      private abb.egmri.Egmri.EgmriJoints externalJoints_ = abb.egmri.Egmri.EgmriJoints.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJoints, abb.egmri.Egmri.EgmriJoints.Builder, abb.egmri.Egmri.EgmriJointsOrBuilder> externalJointsBuilder_;
      public boolean hasExternalJoints() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public abb.egmri.Egmri.EgmriJoints getExternalJoints() {
        if (externalJointsBuilder_ == null) {
          return externalJoints_;
        } else {
          return externalJointsBuilder_.getMessage();
        }
      }
      public Builder setExternalJoints(abb.egmri.Egmri.EgmriJoints value) {
        if (externalJointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          externalJoints_ = value;
          onChanged();
        } else {
          externalJointsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setExternalJoints(
          abb.egmri.Egmri.EgmriJoints.Builder builderForValue) {
        if (externalJointsBuilder_ == null) {
          externalJoints_ = builderForValue.build();
          onChanged();
        } else {
          externalJointsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeExternalJoints(abb.egmri.Egmri.EgmriJoints value) {
        if (externalJointsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              externalJoints_ != abb.egmri.Egmri.EgmriJoints.getDefaultInstance()) {
            externalJoints_ =
              abb.egmri.Egmri.EgmriJoints.newBuilder(externalJoints_).mergeFrom(value).buildPartial();
          } else {
            externalJoints_ = value;
          }
          onChanged();
        } else {
          externalJointsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearExternalJoints() {
        if (externalJointsBuilder_ == null) {
          externalJoints_ = abb.egmri.Egmri.EgmriJoints.getDefaultInstance();
          onChanged();
        } else {
          externalJointsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public abb.egmri.Egmri.EgmriJoints.Builder getExternalJointsBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getExternalJointsFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointsOrBuilder getExternalJointsOrBuilder() {
        if (externalJointsBuilder_ != null) {
          return externalJointsBuilder_.getMessageOrBuilder();
        } else {
          return externalJoints_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJoints, abb.egmri.Egmri.EgmriJoints.Builder, abb.egmri.Egmri.EgmriJointsOrBuilder> 
          getExternalJointsFieldBuilder() {
        if (externalJointsBuilder_ == null) {
          externalJointsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJoints, abb.egmri.Egmri.EgmriJoints.Builder, abb.egmri.Egmri.EgmriJointsOrBuilder>(
                  externalJoints_,
                  getParentForChildren(),
                  isClean());
          externalJoints_ = null;
        }
        return externalJointsBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriJointSpace)
    }
    
    static {
      defaultInstance = new EgmriJointSpace(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriJointSpace)
  }
  
  public interface EgmriFeedbackOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .abb.egmri.EgmriPose cartesianPose = 1;
    boolean hasCartesianPose();
    abb.egmri.Egmri.EgmriPose getCartesianPose();
    abb.egmri.Egmri.EgmriPoseOrBuilder getCartesianPoseOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace jointPosition = 2;
    boolean hasJointPosition();
    abb.egmri.Egmri.EgmriJointSpace getJointPosition();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointPositionOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace jointSpeed = 3;
    boolean hasJointSpeed();
    abb.egmri.Egmri.EgmriJointSpace getJointSpeed();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointSpeedOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace jointTorque = 4;
    boolean hasJointTorque();
    abb.egmri.Egmri.EgmriJointSpace getJointTorque();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointTorqueOrBuilder();
  }
  public static final class EgmriFeedback extends
      com.google.protobuf.GeneratedMessage
      implements EgmriFeedbackOrBuilder {
    // Use EgmriFeedback.newBuilder() to construct.
    private EgmriFeedback(Builder builder) {
      super(builder);
    }
    private EgmriFeedback(boolean noInit) {}
    
    private static final EgmriFeedback defaultInstance;
    public static EgmriFeedback getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriFeedback getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriFeedback_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriFeedback_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .abb.egmri.EgmriPose cartesianPose = 1;
    public static final int CARTESIANPOSE_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriPose cartesianPose_;
    public boolean hasCartesianPose() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriPose getCartesianPose() {
      return cartesianPose_;
    }
    public abb.egmri.Egmri.EgmriPoseOrBuilder getCartesianPoseOrBuilder() {
      return cartesianPose_;
    }
    
    // optional .abb.egmri.EgmriJointSpace jointPosition = 2;
    public static final int JOINTPOSITION_FIELD_NUMBER = 2;
    private abb.egmri.Egmri.EgmriJointSpace jointPosition_;
    public boolean hasJointPosition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public abb.egmri.Egmri.EgmriJointSpace getJointPosition() {
      return jointPosition_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointPositionOrBuilder() {
      return jointPosition_;
    }
    
    // optional .abb.egmri.EgmriJointSpace jointSpeed = 3;
    public static final int JOINTSPEED_FIELD_NUMBER = 3;
    private abb.egmri.Egmri.EgmriJointSpace jointSpeed_;
    public boolean hasJointSpeed() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public abb.egmri.Egmri.EgmriJointSpace getJointSpeed() {
      return jointSpeed_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointSpeedOrBuilder() {
      return jointSpeed_;
    }
    
    // optional .abb.egmri.EgmriJointSpace jointTorque = 4;
    public static final int JOINTTORQUE_FIELD_NUMBER = 4;
    private abb.egmri.Egmri.EgmriJointSpace jointTorque_;
    public boolean hasJointTorque() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public abb.egmri.Egmri.EgmriJointSpace getJointTorque() {
      return jointTorque_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointTorqueOrBuilder() {
      return jointTorque_;
    }
    
    private void initFields() {
      cartesianPose_ = abb.egmri.Egmri.EgmriPose.getDefaultInstance();
      jointPosition_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      jointSpeed_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      jointTorque_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasCartesianPose()) {
        if (!getCartesianPose().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, cartesianPose_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, jointPosition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, jointSpeed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, jointTorque_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cartesianPose_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, jointPosition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, jointSpeed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, jointTorque_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriFeedback parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriFeedback parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriFeedback parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriFeedback parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriFeedback parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriFeedback parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriFeedback parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriFeedback parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriFeedback parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriFeedback parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriFeedback prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriFeedbackOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriFeedback_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriFeedback_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriFeedback.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCartesianPoseFieldBuilder();
          getJointPositionFieldBuilder();
          getJointSpeedFieldBuilder();
          getJointTorqueFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (cartesianPoseBuilder_ == null) {
          cartesianPose_ = abb.egmri.Egmri.EgmriPose.getDefaultInstance();
        } else {
          cartesianPoseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (jointPositionBuilder_ == null) {
          jointPosition_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          jointPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (jointSpeedBuilder_ == null) {
          jointSpeed_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          jointSpeedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (jointTorqueBuilder_ == null) {
          jointTorque_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          jointTorqueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriFeedback.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriFeedback getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriFeedback.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriFeedback build() {
        abb.egmri.Egmri.EgmriFeedback result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriFeedback buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriFeedback result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriFeedback buildPartial() {
        abb.egmri.Egmri.EgmriFeedback result = new abb.egmri.Egmri.EgmriFeedback(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (cartesianPoseBuilder_ == null) {
          result.cartesianPose_ = cartesianPose_;
        } else {
          result.cartesianPose_ = cartesianPoseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (jointPositionBuilder_ == null) {
          result.jointPosition_ = jointPosition_;
        } else {
          result.jointPosition_ = jointPositionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (jointSpeedBuilder_ == null) {
          result.jointSpeed_ = jointSpeed_;
        } else {
          result.jointSpeed_ = jointSpeedBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (jointTorqueBuilder_ == null) {
          result.jointTorque_ = jointTorque_;
        } else {
          result.jointTorque_ = jointTorqueBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriFeedback) {
          return mergeFrom((abb.egmri.Egmri.EgmriFeedback)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriFeedback other) {
        if (other == abb.egmri.Egmri.EgmriFeedback.getDefaultInstance()) return this;
        if (other.hasCartesianPose()) {
          mergeCartesianPose(other.getCartesianPose());
        }
        if (other.hasJointPosition()) {
          mergeJointPosition(other.getJointPosition());
        }
        if (other.hasJointSpeed()) {
          mergeJointSpeed(other.getJointSpeed());
        }
        if (other.hasJointTorque()) {
          mergeJointTorque(other.getJointTorque());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasCartesianPose()) {
          if (!getCartesianPose().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              abb.egmri.Egmri.EgmriPose.Builder subBuilder = abb.egmri.Egmri.EgmriPose.newBuilder();
              if (hasCartesianPose()) {
                subBuilder.mergeFrom(getCartesianPose());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCartesianPose(subBuilder.buildPartial());
              break;
            }
            case 18: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasJointPosition()) {
                subBuilder.mergeFrom(getJointPosition());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJointPosition(subBuilder.buildPartial());
              break;
            }
            case 26: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasJointSpeed()) {
                subBuilder.mergeFrom(getJointSpeed());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJointSpeed(subBuilder.buildPartial());
              break;
            }
            case 34: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasJointTorque()) {
                subBuilder.mergeFrom(getJointTorque());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJointTorque(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .abb.egmri.EgmriPose cartesianPose = 1;
      private abb.egmri.Egmri.EgmriPose cartesianPose_ = abb.egmri.Egmri.EgmriPose.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPose, abb.egmri.Egmri.EgmriPose.Builder, abb.egmri.Egmri.EgmriPoseOrBuilder> cartesianPoseBuilder_;
      public boolean hasCartesianPose() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriPose getCartesianPose() {
        if (cartesianPoseBuilder_ == null) {
          return cartesianPose_;
        } else {
          return cartesianPoseBuilder_.getMessage();
        }
      }
      public Builder setCartesianPose(abb.egmri.Egmri.EgmriPose value) {
        if (cartesianPoseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cartesianPose_ = value;
          onChanged();
        } else {
          cartesianPoseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setCartesianPose(
          abb.egmri.Egmri.EgmriPose.Builder builderForValue) {
        if (cartesianPoseBuilder_ == null) {
          cartesianPose_ = builderForValue.build();
          onChanged();
        } else {
          cartesianPoseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeCartesianPose(abb.egmri.Egmri.EgmriPose value) {
        if (cartesianPoseBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              cartesianPose_ != abb.egmri.Egmri.EgmriPose.getDefaultInstance()) {
            cartesianPose_ =
              abb.egmri.Egmri.EgmriPose.newBuilder(cartesianPose_).mergeFrom(value).buildPartial();
          } else {
            cartesianPose_ = value;
          }
          onChanged();
        } else {
          cartesianPoseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearCartesianPose() {
        if (cartesianPoseBuilder_ == null) {
          cartesianPose_ = abb.egmri.Egmri.EgmriPose.getDefaultInstance();
          onChanged();
        } else {
          cartesianPoseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public abb.egmri.Egmri.EgmriPose.Builder getCartesianPoseBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCartesianPoseFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriPoseOrBuilder getCartesianPoseOrBuilder() {
        if (cartesianPoseBuilder_ != null) {
          return cartesianPoseBuilder_.getMessageOrBuilder();
        } else {
          return cartesianPose_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPose, abb.egmri.Egmri.EgmriPose.Builder, abb.egmri.Egmri.EgmriPoseOrBuilder> 
          getCartesianPoseFieldBuilder() {
        if (cartesianPoseBuilder_ == null) {
          cartesianPoseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriPose, abb.egmri.Egmri.EgmriPose.Builder, abb.egmri.Egmri.EgmriPoseOrBuilder>(
                  cartesianPose_,
                  getParentForChildren(),
                  isClean());
          cartesianPose_ = null;
        }
        return cartesianPoseBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace jointPosition = 2;
      private abb.egmri.Egmri.EgmriJointSpace jointPosition_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> jointPositionBuilder_;
      public boolean hasJointPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public abb.egmri.Egmri.EgmriJointSpace getJointPosition() {
        if (jointPositionBuilder_ == null) {
          return jointPosition_;
        } else {
          return jointPositionBuilder_.getMessage();
        }
      }
      public Builder setJointPosition(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          jointPosition_ = value;
          onChanged();
        } else {
          jointPositionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setJointPosition(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (jointPositionBuilder_ == null) {
          jointPosition_ = builderForValue.build();
          onChanged();
        } else {
          jointPositionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeJointPosition(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointPositionBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              jointPosition_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            jointPosition_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(jointPosition_).mergeFrom(value).buildPartial();
          } else {
            jointPosition_ = value;
          }
          onChanged();
        } else {
          jointPositionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearJointPosition() {
        if (jointPositionBuilder_ == null) {
          jointPosition_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          jointPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getJointPositionBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getJointPositionFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointPositionOrBuilder() {
        if (jointPositionBuilder_ != null) {
          return jointPositionBuilder_.getMessageOrBuilder();
        } else {
          return jointPosition_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getJointPositionFieldBuilder() {
        if (jointPositionBuilder_ == null) {
          jointPositionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  jointPosition_,
                  getParentForChildren(),
                  isClean());
          jointPosition_ = null;
        }
        return jointPositionBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace jointSpeed = 3;
      private abb.egmri.Egmri.EgmriJointSpace jointSpeed_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> jointSpeedBuilder_;
      public boolean hasJointSpeed() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public abb.egmri.Egmri.EgmriJointSpace getJointSpeed() {
        if (jointSpeedBuilder_ == null) {
          return jointSpeed_;
        } else {
          return jointSpeedBuilder_.getMessage();
        }
      }
      public Builder setJointSpeed(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointSpeedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          jointSpeed_ = value;
          onChanged();
        } else {
          jointSpeedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setJointSpeed(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (jointSpeedBuilder_ == null) {
          jointSpeed_ = builderForValue.build();
          onChanged();
        } else {
          jointSpeedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeJointSpeed(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointSpeedBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              jointSpeed_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            jointSpeed_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(jointSpeed_).mergeFrom(value).buildPartial();
          } else {
            jointSpeed_ = value;
          }
          onChanged();
        } else {
          jointSpeedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearJointSpeed() {
        if (jointSpeedBuilder_ == null) {
          jointSpeed_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          jointSpeedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getJointSpeedBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getJointSpeedFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointSpeedOrBuilder() {
        if (jointSpeedBuilder_ != null) {
          return jointSpeedBuilder_.getMessageOrBuilder();
        } else {
          return jointSpeed_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getJointSpeedFieldBuilder() {
        if (jointSpeedBuilder_ == null) {
          jointSpeedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  jointSpeed_,
                  getParentForChildren(),
                  isClean());
          jointSpeed_ = null;
        }
        return jointSpeedBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace jointTorque = 4;
      private abb.egmri.Egmri.EgmriJointSpace jointTorque_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> jointTorqueBuilder_;
      public boolean hasJointTorque() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public abb.egmri.Egmri.EgmriJointSpace getJointTorque() {
        if (jointTorqueBuilder_ == null) {
          return jointTorque_;
        } else {
          return jointTorqueBuilder_.getMessage();
        }
      }
      public Builder setJointTorque(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointTorqueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          jointTorque_ = value;
          onChanged();
        } else {
          jointTorqueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder setJointTorque(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (jointTorqueBuilder_ == null) {
          jointTorque_ = builderForValue.build();
          onChanged();
        } else {
          jointTorqueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder mergeJointTorque(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointTorqueBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              jointTorque_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            jointTorque_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(jointTorque_).mergeFrom(value).buildPartial();
          } else {
            jointTorque_ = value;
          }
          onChanged();
        } else {
          jointTorqueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder clearJointTorque() {
        if (jointTorqueBuilder_ == null) {
          jointTorque_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          jointTorqueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getJointTorqueBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getJointTorqueFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointTorqueOrBuilder() {
        if (jointTorqueBuilder_ != null) {
          return jointTorqueBuilder_.getMessageOrBuilder();
        } else {
          return jointTorque_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getJointTorqueFieldBuilder() {
        if (jointTorqueBuilder_ == null) {
          jointTorqueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  jointTorque_,
                  getParentForChildren(),
                  isClean());
          jointTorque_ = null;
        }
        return jointTorqueBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriFeedback)
    }
    
    static {
      defaultInstance = new EgmriFeedback(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriFeedback)
  }
  
  public interface EgmriPlannedOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .abb.egmri.EgmriPose cartesianPose = 1;
    boolean hasCartesianPose();
    abb.egmri.Egmri.EgmriPose getCartesianPose();
    abb.egmri.Egmri.EgmriPoseOrBuilder getCartesianPoseOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace jointPosition = 2;
    boolean hasJointPosition();
    abb.egmri.Egmri.EgmriJointSpace getJointPosition();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointPositionOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace jointSpeed = 3;
    boolean hasJointSpeed();
    abb.egmri.Egmri.EgmriJointSpace getJointSpeed();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointSpeedOrBuilder();
  }
  public static final class EgmriPlanned extends
      com.google.protobuf.GeneratedMessage
      implements EgmriPlannedOrBuilder {
    // Use EgmriPlanned.newBuilder() to construct.
    private EgmriPlanned(Builder builder) {
      super(builder);
    }
    private EgmriPlanned(boolean noInit) {}
    
    private static final EgmriPlanned defaultInstance;
    public static EgmriPlanned getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriPlanned getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPlanned_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPlanned_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .abb.egmri.EgmriPose cartesianPose = 1;
    public static final int CARTESIANPOSE_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriPose cartesianPose_;
    public boolean hasCartesianPose() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriPose getCartesianPose() {
      return cartesianPose_;
    }
    public abb.egmri.Egmri.EgmriPoseOrBuilder getCartesianPoseOrBuilder() {
      return cartesianPose_;
    }
    
    // optional .abb.egmri.EgmriJointSpace jointPosition = 2;
    public static final int JOINTPOSITION_FIELD_NUMBER = 2;
    private abb.egmri.Egmri.EgmriJointSpace jointPosition_;
    public boolean hasJointPosition() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public abb.egmri.Egmri.EgmriJointSpace getJointPosition() {
      return jointPosition_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointPositionOrBuilder() {
      return jointPosition_;
    }
    
    // optional .abb.egmri.EgmriJointSpace jointSpeed = 3;
    public static final int JOINTSPEED_FIELD_NUMBER = 3;
    private abb.egmri.Egmri.EgmriJointSpace jointSpeed_;
    public boolean hasJointSpeed() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public abb.egmri.Egmri.EgmriJointSpace getJointSpeed() {
      return jointSpeed_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointSpeedOrBuilder() {
      return jointSpeed_;
    }
    
    private void initFields() {
      cartesianPose_ = abb.egmri.Egmri.EgmriPose.getDefaultInstance();
      jointPosition_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      jointSpeed_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasCartesianPose()) {
        if (!getCartesianPose().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, cartesianPose_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, jointPosition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, jointSpeed_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cartesianPose_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, jointPosition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, jointSpeed_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriPlanned parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPlanned parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPlanned parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPlanned parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPlanned parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPlanned parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPlanned parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriPlanned parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriPlanned parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPlanned parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriPlanned prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriPlannedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPlanned_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPlanned_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriPlanned.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCartesianPoseFieldBuilder();
          getJointPositionFieldBuilder();
          getJointSpeedFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (cartesianPoseBuilder_ == null) {
          cartesianPose_ = abb.egmri.Egmri.EgmriPose.getDefaultInstance();
        } else {
          cartesianPoseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (jointPositionBuilder_ == null) {
          jointPosition_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          jointPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (jointSpeedBuilder_ == null) {
          jointSpeed_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          jointSpeedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriPlanned.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriPlanned getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriPlanned.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriPlanned build() {
        abb.egmri.Egmri.EgmriPlanned result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriPlanned buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriPlanned result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriPlanned buildPartial() {
        abb.egmri.Egmri.EgmriPlanned result = new abb.egmri.Egmri.EgmriPlanned(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (cartesianPoseBuilder_ == null) {
          result.cartesianPose_ = cartesianPose_;
        } else {
          result.cartesianPose_ = cartesianPoseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (jointPositionBuilder_ == null) {
          result.jointPosition_ = jointPosition_;
        } else {
          result.jointPosition_ = jointPositionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (jointSpeedBuilder_ == null) {
          result.jointSpeed_ = jointSpeed_;
        } else {
          result.jointSpeed_ = jointSpeedBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriPlanned) {
          return mergeFrom((abb.egmri.Egmri.EgmriPlanned)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriPlanned other) {
        if (other == abb.egmri.Egmri.EgmriPlanned.getDefaultInstance()) return this;
        if (other.hasCartesianPose()) {
          mergeCartesianPose(other.getCartesianPose());
        }
        if (other.hasJointPosition()) {
          mergeJointPosition(other.getJointPosition());
        }
        if (other.hasJointSpeed()) {
          mergeJointSpeed(other.getJointSpeed());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasCartesianPose()) {
          if (!getCartesianPose().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              abb.egmri.Egmri.EgmriPose.Builder subBuilder = abb.egmri.Egmri.EgmriPose.newBuilder();
              if (hasCartesianPose()) {
                subBuilder.mergeFrom(getCartesianPose());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCartesianPose(subBuilder.buildPartial());
              break;
            }
            case 18: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasJointPosition()) {
                subBuilder.mergeFrom(getJointPosition());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJointPosition(subBuilder.buildPartial());
              break;
            }
            case 26: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasJointSpeed()) {
                subBuilder.mergeFrom(getJointSpeed());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setJointSpeed(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .abb.egmri.EgmriPose cartesianPose = 1;
      private abb.egmri.Egmri.EgmriPose cartesianPose_ = abb.egmri.Egmri.EgmriPose.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPose, abb.egmri.Egmri.EgmriPose.Builder, abb.egmri.Egmri.EgmriPoseOrBuilder> cartesianPoseBuilder_;
      public boolean hasCartesianPose() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriPose getCartesianPose() {
        if (cartesianPoseBuilder_ == null) {
          return cartesianPose_;
        } else {
          return cartesianPoseBuilder_.getMessage();
        }
      }
      public Builder setCartesianPose(abb.egmri.Egmri.EgmriPose value) {
        if (cartesianPoseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cartesianPose_ = value;
          onChanged();
        } else {
          cartesianPoseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setCartesianPose(
          abb.egmri.Egmri.EgmriPose.Builder builderForValue) {
        if (cartesianPoseBuilder_ == null) {
          cartesianPose_ = builderForValue.build();
          onChanged();
        } else {
          cartesianPoseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeCartesianPose(abb.egmri.Egmri.EgmriPose value) {
        if (cartesianPoseBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              cartesianPose_ != abb.egmri.Egmri.EgmriPose.getDefaultInstance()) {
            cartesianPose_ =
              abb.egmri.Egmri.EgmriPose.newBuilder(cartesianPose_).mergeFrom(value).buildPartial();
          } else {
            cartesianPose_ = value;
          }
          onChanged();
        } else {
          cartesianPoseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearCartesianPose() {
        if (cartesianPoseBuilder_ == null) {
          cartesianPose_ = abb.egmri.Egmri.EgmriPose.getDefaultInstance();
          onChanged();
        } else {
          cartesianPoseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public abb.egmri.Egmri.EgmriPose.Builder getCartesianPoseBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCartesianPoseFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriPoseOrBuilder getCartesianPoseOrBuilder() {
        if (cartesianPoseBuilder_ != null) {
          return cartesianPoseBuilder_.getMessageOrBuilder();
        } else {
          return cartesianPose_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPose, abb.egmri.Egmri.EgmriPose.Builder, abb.egmri.Egmri.EgmriPoseOrBuilder> 
          getCartesianPoseFieldBuilder() {
        if (cartesianPoseBuilder_ == null) {
          cartesianPoseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriPose, abb.egmri.Egmri.EgmriPose.Builder, abb.egmri.Egmri.EgmriPoseOrBuilder>(
                  cartesianPose_,
                  getParentForChildren(),
                  isClean());
          cartesianPose_ = null;
        }
        return cartesianPoseBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace jointPosition = 2;
      private abb.egmri.Egmri.EgmriJointSpace jointPosition_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> jointPositionBuilder_;
      public boolean hasJointPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public abb.egmri.Egmri.EgmriJointSpace getJointPosition() {
        if (jointPositionBuilder_ == null) {
          return jointPosition_;
        } else {
          return jointPositionBuilder_.getMessage();
        }
      }
      public Builder setJointPosition(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointPositionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          jointPosition_ = value;
          onChanged();
        } else {
          jointPositionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setJointPosition(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (jointPositionBuilder_ == null) {
          jointPosition_ = builderForValue.build();
          onChanged();
        } else {
          jointPositionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeJointPosition(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointPositionBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              jointPosition_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            jointPosition_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(jointPosition_).mergeFrom(value).buildPartial();
          } else {
            jointPosition_ = value;
          }
          onChanged();
        } else {
          jointPositionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearJointPosition() {
        if (jointPositionBuilder_ == null) {
          jointPosition_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          jointPositionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getJointPositionBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getJointPositionFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointPositionOrBuilder() {
        if (jointPositionBuilder_ != null) {
          return jointPositionBuilder_.getMessageOrBuilder();
        } else {
          return jointPosition_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getJointPositionFieldBuilder() {
        if (jointPositionBuilder_ == null) {
          jointPositionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  jointPosition_,
                  getParentForChildren(),
                  isClean());
          jointPosition_ = null;
        }
        return jointPositionBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace jointSpeed = 3;
      private abb.egmri.Egmri.EgmriJointSpace jointSpeed_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> jointSpeedBuilder_;
      public boolean hasJointSpeed() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public abb.egmri.Egmri.EgmriJointSpace getJointSpeed() {
        if (jointSpeedBuilder_ == null) {
          return jointSpeed_;
        } else {
          return jointSpeedBuilder_.getMessage();
        }
      }
      public Builder setJointSpeed(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointSpeedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          jointSpeed_ = value;
          onChanged();
        } else {
          jointSpeedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setJointSpeed(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (jointSpeedBuilder_ == null) {
          jointSpeed_ = builderForValue.build();
          onChanged();
        } else {
          jointSpeedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeJointSpeed(abb.egmri.Egmri.EgmriJointSpace value) {
        if (jointSpeedBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              jointSpeed_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            jointSpeed_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(jointSpeed_).mergeFrom(value).buildPartial();
          } else {
            jointSpeed_ = value;
          }
          onChanged();
        } else {
          jointSpeedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearJointSpeed() {
        if (jointSpeedBuilder_ == null) {
          jointSpeed_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          jointSpeedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getJointSpeedBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getJointSpeedFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getJointSpeedOrBuilder() {
        if (jointSpeedBuilder_ != null) {
          return jointSpeedBuilder_.getMessageOrBuilder();
        } else {
          return jointSpeed_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getJointSpeedFieldBuilder() {
        if (jointSpeedBuilder_ == null) {
          jointSpeedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  jointSpeed_,
                  getParentForChildren(),
                  isClean());
          jointSpeed_ = null;
        }
        return jointSpeedBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriPlanned)
    }
    
    static {
      defaultInstance = new EgmriPlanned(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriPlanned)
  }
  
  public interface EgmriPIDParametersOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .abb.egmri.EgmriJointSpace kp = 1;
    boolean hasKp();
    abb.egmri.Egmri.EgmriJointSpace getKp();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getKpOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace kv = 2;
    boolean hasKv();
    abb.egmri.Egmri.EgmriJointSpace getKv();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getKvOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace ki = 3;
    boolean hasKi();
    abb.egmri.Egmri.EgmriJointSpace getKi();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getKiOrBuilder();
  }
  public static final class EgmriPIDParameters extends
      com.google.protobuf.GeneratedMessage
      implements EgmriPIDParametersOrBuilder {
    // Use EgmriPIDParameters.newBuilder() to construct.
    private EgmriPIDParameters(Builder builder) {
      super(builder);
    }
    private EgmriPIDParameters(boolean noInit) {}
    
    private static final EgmriPIDParameters defaultInstance;
    public static EgmriPIDParameters getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriPIDParameters getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPIDParameters_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPIDParameters_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .abb.egmri.EgmriJointSpace kp = 1;
    public static final int KP_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriJointSpace kp_;
    public boolean hasKp() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriJointSpace getKp() {
      return kp_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getKpOrBuilder() {
      return kp_;
    }
    
    // optional .abb.egmri.EgmriJointSpace kv = 2;
    public static final int KV_FIELD_NUMBER = 2;
    private abb.egmri.Egmri.EgmriJointSpace kv_;
    public boolean hasKv() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public abb.egmri.Egmri.EgmriJointSpace getKv() {
      return kv_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getKvOrBuilder() {
      return kv_;
    }
    
    // optional .abb.egmri.EgmriJointSpace ki = 3;
    public static final int KI_FIELD_NUMBER = 3;
    private abb.egmri.Egmri.EgmriJointSpace ki_;
    public boolean hasKi() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public abb.egmri.Egmri.EgmriJointSpace getKi() {
      return ki_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getKiOrBuilder() {
      return ki_;
    }
    
    private void initFields() {
      kp_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      kv_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      ki_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, kp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, kv_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, ki_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, kp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, kv_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, ki_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriPIDParameters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPIDParameters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPIDParameters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPIDParameters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPIDParameters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPIDParameters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPIDParameters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriPIDParameters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriPIDParameters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriPIDParameters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriPIDParameters prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriPIDParametersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPIDParameters_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriPIDParameters_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriPIDParameters.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getKpFieldBuilder();
          getKvFieldBuilder();
          getKiFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (kpBuilder_ == null) {
          kp_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          kpBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (kvBuilder_ == null) {
          kv_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          kvBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (kiBuilder_ == null) {
          ki_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          kiBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriPIDParameters.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriPIDParameters getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriPIDParameters build() {
        abb.egmri.Egmri.EgmriPIDParameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriPIDParameters buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriPIDParameters result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriPIDParameters buildPartial() {
        abb.egmri.Egmri.EgmriPIDParameters result = new abb.egmri.Egmri.EgmriPIDParameters(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (kpBuilder_ == null) {
          result.kp_ = kp_;
        } else {
          result.kp_ = kpBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (kvBuilder_ == null) {
          result.kv_ = kv_;
        } else {
          result.kv_ = kvBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (kiBuilder_ == null) {
          result.ki_ = ki_;
        } else {
          result.ki_ = kiBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriPIDParameters) {
          return mergeFrom((abb.egmri.Egmri.EgmriPIDParameters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriPIDParameters other) {
        if (other == abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance()) return this;
        if (other.hasKp()) {
          mergeKp(other.getKp());
        }
        if (other.hasKv()) {
          mergeKv(other.getKv());
        }
        if (other.hasKi()) {
          mergeKi(other.getKi());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasKp()) {
                subBuilder.mergeFrom(getKp());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setKp(subBuilder.buildPartial());
              break;
            }
            case 18: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasKv()) {
                subBuilder.mergeFrom(getKv());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setKv(subBuilder.buildPartial());
              break;
            }
            case 26: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasKi()) {
                subBuilder.mergeFrom(getKi());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setKi(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .abb.egmri.EgmriJointSpace kp = 1;
      private abb.egmri.Egmri.EgmriJointSpace kp_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> kpBuilder_;
      public boolean hasKp() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriJointSpace getKp() {
        if (kpBuilder_ == null) {
          return kp_;
        } else {
          return kpBuilder_.getMessage();
        }
      }
      public Builder setKp(abb.egmri.Egmri.EgmriJointSpace value) {
        if (kpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kp_ = value;
          onChanged();
        } else {
          kpBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setKp(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (kpBuilder_ == null) {
          kp_ = builderForValue.build();
          onChanged();
        } else {
          kpBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeKp(abb.egmri.Egmri.EgmriJointSpace value) {
        if (kpBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              kp_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            kp_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(kp_).mergeFrom(value).buildPartial();
          } else {
            kp_ = value;
          }
          onChanged();
        } else {
          kpBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearKp() {
        if (kpBuilder_ == null) {
          kp_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          kpBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getKpBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getKpFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getKpOrBuilder() {
        if (kpBuilder_ != null) {
          return kpBuilder_.getMessageOrBuilder();
        } else {
          return kp_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getKpFieldBuilder() {
        if (kpBuilder_ == null) {
          kpBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  kp_,
                  getParentForChildren(),
                  isClean());
          kp_ = null;
        }
        return kpBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace kv = 2;
      private abb.egmri.Egmri.EgmriJointSpace kv_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> kvBuilder_;
      public boolean hasKv() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public abb.egmri.Egmri.EgmriJointSpace getKv() {
        if (kvBuilder_ == null) {
          return kv_;
        } else {
          return kvBuilder_.getMessage();
        }
      }
      public Builder setKv(abb.egmri.Egmri.EgmriJointSpace value) {
        if (kvBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          kv_ = value;
          onChanged();
        } else {
          kvBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setKv(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (kvBuilder_ == null) {
          kv_ = builderForValue.build();
          onChanged();
        } else {
          kvBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeKv(abb.egmri.Egmri.EgmriJointSpace value) {
        if (kvBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              kv_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            kv_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(kv_).mergeFrom(value).buildPartial();
          } else {
            kv_ = value;
          }
          onChanged();
        } else {
          kvBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearKv() {
        if (kvBuilder_ == null) {
          kv_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          kvBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getKvBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getKvFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getKvOrBuilder() {
        if (kvBuilder_ != null) {
          return kvBuilder_.getMessageOrBuilder();
        } else {
          return kv_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getKvFieldBuilder() {
        if (kvBuilder_ == null) {
          kvBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  kv_,
                  getParentForChildren(),
                  isClean());
          kv_ = null;
        }
        return kvBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace ki = 3;
      private abb.egmri.Egmri.EgmriJointSpace ki_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> kiBuilder_;
      public boolean hasKi() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public abb.egmri.Egmri.EgmriJointSpace getKi() {
        if (kiBuilder_ == null) {
          return ki_;
        } else {
          return kiBuilder_.getMessage();
        }
      }
      public Builder setKi(abb.egmri.Egmri.EgmriJointSpace value) {
        if (kiBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ki_ = value;
          onChanged();
        } else {
          kiBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setKi(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (kiBuilder_ == null) {
          ki_ = builderForValue.build();
          onChanged();
        } else {
          kiBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeKi(abb.egmri.Egmri.EgmriJointSpace value) {
        if (kiBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              ki_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            ki_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(ki_).mergeFrom(value).buildPartial();
          } else {
            ki_ = value;
          }
          onChanged();
        } else {
          kiBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearKi() {
        if (kiBuilder_ == null) {
          ki_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          kiBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getKiBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getKiFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getKiOrBuilder() {
        if (kiBuilder_ != null) {
          return kiBuilder_.getMessageOrBuilder();
        } else {
          return ki_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getKiFieldBuilder() {
        if (kiBuilder_ == null) {
          kiBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  ki_,
                  getParentForChildren(),
                  isClean());
          ki_ = null;
        }
        return kiBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriPIDParameters)
    }
    
    static {
      defaultInstance = new EgmriPIDParameters(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriPIDParameters)
  }
  
  public interface EgmriMotorStateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .abb.egmri.EgmriMotorState.MotorStateType state = 1;
    boolean hasState();
    abb.egmri.Egmri.EgmriMotorState.MotorStateType getState();
  }
  public static final class EgmriMotorState extends
      com.google.protobuf.GeneratedMessage
      implements EgmriMotorStateOrBuilder {
    // Use EgmriMotorState.newBuilder() to construct.
    private EgmriMotorState(Builder builder) {
      super(builder);
    }
    private EgmriMotorState(boolean noInit) {}
    
    private static final EgmriMotorState defaultInstance;
    public static EgmriMotorState getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriMotorState getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriMotorState_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriMotorState_fieldAccessorTable;
    }
    
    public enum MotorStateType
        implements com.google.protobuf.ProtocolMessageEnum {
      MOTORS_UNDEFINED(0, 0),
      MOTORS_ON(1, 1),
      MOTORS_OFF(2, 2),
      ;
      
      public static final int MOTORS_UNDEFINED_VALUE = 0;
      public static final int MOTORS_ON_VALUE = 1;
      public static final int MOTORS_OFF_VALUE = 2;
      
      
      public final int getNumber() { return value; }
      
      public static MotorStateType valueOf(int value) {
        switch (value) {
          case 0: return MOTORS_UNDEFINED;
          case 1: return MOTORS_ON;
          case 2: return MOTORS_OFF;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<MotorStateType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MotorStateType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MotorStateType>() {
              public MotorStateType findValueByNumber(int number) {
                return MotorStateType.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return abb.egmri.Egmri.EgmriMotorState.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final MotorStateType[] VALUES = {
        MOTORS_UNDEFINED, MOTORS_ON, MOTORS_OFF, 
      };
      
      public static MotorStateType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private MotorStateType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:abb.egmri.EgmriMotorState.MotorStateType)
    }
    
    private int bitField0_;
    // required .abb.egmri.EgmriMotorState.MotorStateType state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriMotorState.MotorStateType state_;
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriMotorState.MotorStateType getState() {
      return state_;
    }
    
    private void initFields() {
      state_ = abb.egmri.Egmri.EgmriMotorState.MotorStateType.MOTORS_UNDEFINED;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriMotorState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMotorState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMotorState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMotorState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMotorState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMotorState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMotorState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriMotorState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriMotorState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMotorState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriMotorState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriMotorStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriMotorState_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriMotorState_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriMotorState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        state_ = abb.egmri.Egmri.EgmriMotorState.MotorStateType.MOTORS_UNDEFINED;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriMotorState.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriMotorState getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriMotorState.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriMotorState build() {
        abb.egmri.Egmri.EgmriMotorState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriMotorState buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriMotorState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriMotorState buildPartial() {
        abb.egmri.Egmri.EgmriMotorState result = new abb.egmri.Egmri.EgmriMotorState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriMotorState) {
          return mergeFrom((abb.egmri.Egmri.EgmriMotorState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriMotorState other) {
        if (other == abb.egmri.Egmri.EgmriMotorState.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              abb.egmri.Egmri.EgmriMotorState.MotorStateType value = abb.egmri.Egmri.EgmriMotorState.MotorStateType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .abb.egmri.EgmriMotorState.MotorStateType state = 1;
      private abb.egmri.Egmri.EgmriMotorState.MotorStateType state_ = abb.egmri.Egmri.EgmriMotorState.MotorStateType.MOTORS_UNDEFINED;
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriMotorState.MotorStateType getState() {
        return state_;
      }
      public Builder setState(abb.egmri.Egmri.EgmriMotorState.MotorStateType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        onChanged();
        return this;
      }
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = abb.egmri.Egmri.EgmriMotorState.MotorStateType.MOTORS_UNDEFINED;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriMotorState)
    }
    
    static {
      defaultInstance = new EgmriMotorState(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriMotorState)
  }
  
  public interface EgmriMCIStateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .abb.egmri.EgmriMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
    boolean hasState();
    abb.egmri.Egmri.EgmriMCIState.MCIStateType getState();
  }
  public static final class EgmriMCIState extends
      com.google.protobuf.GeneratedMessage
      implements EgmriMCIStateOrBuilder {
    // Use EgmriMCIState.newBuilder() to construct.
    private EgmriMCIState(Builder builder) {
      super(builder);
    }
    private EgmriMCIState(boolean noInit) {}
    
    private static final EgmriMCIState defaultInstance;
    public static EgmriMCIState getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriMCIState getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriMCIState_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriMCIState_fieldAccessorTable;
    }
    
    public enum MCIStateType
        implements com.google.protobuf.ProtocolMessageEnum {
      MCI_UNDEFINED(0, 0),
      MCI_ERROR(1, 1),
      MCI_STOPPED(2, 2),
      MCI_RUNNING(3, 3),
      ;
      
      public static final int MCI_UNDEFINED_VALUE = 0;
      public static final int MCI_ERROR_VALUE = 1;
      public static final int MCI_STOPPED_VALUE = 2;
      public static final int MCI_RUNNING_VALUE = 3;
      
      
      public final int getNumber() { return value; }
      
      public static MCIStateType valueOf(int value) {
        switch (value) {
          case 0: return MCI_UNDEFINED;
          case 1: return MCI_ERROR;
          case 2: return MCI_STOPPED;
          case 3: return MCI_RUNNING;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<MCIStateType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<MCIStateType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MCIStateType>() {
              public MCIStateType findValueByNumber(int number) {
                return MCIStateType.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return abb.egmri.Egmri.EgmriMCIState.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final MCIStateType[] VALUES = {
        MCI_UNDEFINED, MCI_ERROR, MCI_STOPPED, MCI_RUNNING, 
      };
      
      public static MCIStateType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private MCIStateType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:abb.egmri.EgmriMCIState.MCIStateType)
    }
    
    private int bitField0_;
    // required .abb.egmri.EgmriMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
    public static final int STATE_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriMCIState.MCIStateType state_;
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriMCIState.MCIStateType getState() {
      return state_;
    }
    
    private void initFields() {
      state_ = abb.egmri.Egmri.EgmriMCIState.MCIStateType.MCI_UNDEFINED;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriMCIState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMCIState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMCIState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMCIState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMCIState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMCIState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMCIState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriMCIState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriMCIState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriMCIState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriMCIState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriMCIStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriMCIState_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriMCIState_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriMCIState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        state_ = abb.egmri.Egmri.EgmriMCIState.MCIStateType.MCI_UNDEFINED;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriMCIState.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriMCIState getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriMCIState.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriMCIState build() {
        abb.egmri.Egmri.EgmriMCIState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriMCIState buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriMCIState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriMCIState buildPartial() {
        abb.egmri.Egmri.EgmriMCIState result = new abb.egmri.Egmri.EgmriMCIState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriMCIState) {
          return mergeFrom((abb.egmri.Egmri.EgmriMCIState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriMCIState other) {
        if (other == abb.egmri.Egmri.EgmriMCIState.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              abb.egmri.Egmri.EgmriMCIState.MCIStateType value = abb.egmri.Egmri.EgmriMCIState.MCIStateType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .abb.egmri.EgmriMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
      private abb.egmri.Egmri.EgmriMCIState.MCIStateType state_ = abb.egmri.Egmri.EgmriMCIState.MCIStateType.MCI_UNDEFINED;
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriMCIState.MCIStateType getState() {
        return state_;
      }
      public Builder setState(abb.egmri.Egmri.EgmriMCIState.MCIStateType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        onChanged();
        return this;
      }
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = abb.egmri.Egmri.EgmriMCIState.MCIStateType.MCI_UNDEFINED;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriMCIState)
    }
    
    static {
      defaultInstance = new EgmriMCIState(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriMCIState)
  }
  
  public interface EgmriRapidCtrlExecStateOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required .abb.egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
    boolean hasState();
    abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType getState();
  }
  public static final class EgmriRapidCtrlExecState extends
      com.google.protobuf.GeneratedMessage
      implements EgmriRapidCtrlExecStateOrBuilder {
    // Use EgmriRapidCtrlExecState.newBuilder() to construct.
    private EgmriRapidCtrlExecState(Builder builder) {
      super(builder);
    }
    private EgmriRapidCtrlExecState(boolean noInit) {}
    
    private static final EgmriRapidCtrlExecState defaultInstance;
    public static EgmriRapidCtrlExecState getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriRapidCtrlExecState getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriRapidCtrlExecState_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriRapidCtrlExecState_fieldAccessorTable;
    }
    
    public enum RapidCtrlExecStateType
        implements com.google.protobuf.ProtocolMessageEnum {
      RAPID_UNDEFINED(0, 0),
      RAPID_STOPPED(1, 1),
      RAPID_RUNNING(2, 2),
      ;
      
      public static final int RAPID_UNDEFINED_VALUE = 0;
      public static final int RAPID_STOPPED_VALUE = 1;
      public static final int RAPID_RUNNING_VALUE = 2;
      
      
      public final int getNumber() { return value; }
      
      public static RapidCtrlExecStateType valueOf(int value) {
        switch (value) {
          case 0: return RAPID_UNDEFINED;
          case 1: return RAPID_STOPPED;
          case 2: return RAPID_RUNNING;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<RapidCtrlExecStateType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RapidCtrlExecStateType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RapidCtrlExecStateType>() {
              public RapidCtrlExecStateType findValueByNumber(int number) {
                return RapidCtrlExecStateType.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return abb.egmri.Egmri.EgmriRapidCtrlExecState.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final RapidCtrlExecStateType[] VALUES = {
        RAPID_UNDEFINED, RAPID_STOPPED, RAPID_RUNNING, 
      };
      
      public static RapidCtrlExecStateType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private RapidCtrlExecStateType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:abb.egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType)
    }
    
    private int bitField0_;
    // required .abb.egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
    public static final int STATE_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType state_;
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType getState() {
      return state_;
    }
    
    private void initFields() {
      state_ = abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType.RAPID_UNDEFINED;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRapidCtrlExecState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriRapidCtrlExecState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriRapidCtrlExecStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriRapidCtrlExecState_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriRapidCtrlExecState_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriRapidCtrlExecState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        state_ = abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType.RAPID_UNDEFINED;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriRapidCtrlExecState.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriRapidCtrlExecState getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriRapidCtrlExecState.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriRapidCtrlExecState build() {
        abb.egmri.Egmri.EgmriRapidCtrlExecState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriRapidCtrlExecState buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriRapidCtrlExecState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriRapidCtrlExecState buildPartial() {
        abb.egmri.Egmri.EgmriRapidCtrlExecState result = new abb.egmri.Egmri.EgmriRapidCtrlExecState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriRapidCtrlExecState) {
          return mergeFrom((abb.egmri.Egmri.EgmriRapidCtrlExecState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriRapidCtrlExecState other) {
        if (other == abb.egmri.Egmri.EgmriRapidCtrlExecState.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType value = abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .abb.egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
      private abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType state_ = abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType.RAPID_UNDEFINED;
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType getState() {
        return state_;
      }
      public Builder setState(abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        onChanged();
        return this;
      }
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = abb.egmri.Egmri.EgmriRapidCtrlExecState.RapidCtrlExecStateType.RAPID_UNDEFINED;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriRapidCtrlExecState)
    }
    
    static {
      defaultInstance = new EgmriRapidCtrlExecState(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriRapidCtrlExecState)
  }
  
  public interface EgmriTestSignalsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated float signals = 1;
    java.util.List<java.lang.Float> getSignalsList();
    int getSignalsCount();
    float getSignals(int index);
  }
  public static final class EgmriTestSignals extends
      com.google.protobuf.GeneratedMessage
      implements EgmriTestSignalsOrBuilder {
    // Use EgmriTestSignals.newBuilder() to construct.
    private EgmriTestSignals(Builder builder) {
      super(builder);
    }
    private EgmriTestSignals(boolean noInit) {}
    
    private static final EgmriTestSignals defaultInstance;
    public static EgmriTestSignals getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriTestSignals getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriTestSignals_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriTestSignals_fieldAccessorTable;
    }
    
    // repeated float signals = 1;
    public static final int SIGNALS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Float> signals_;
    public java.util.List<java.lang.Float>
        getSignalsList() {
      return signals_;
    }
    public int getSignalsCount() {
      return signals_.size();
    }
    public float getSignals(int index) {
      return signals_.get(index);
    }
    
    private void initFields() {
      signals_ = java.util.Collections.emptyList();;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < signals_.size(); i++) {
        output.writeFloat(1, signals_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        dataSize = 4 * getSignalsList().size();
        size += dataSize;
        size += 1 * getSignalsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriTestSignals parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriTestSignals parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriTestSignals parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriTestSignals parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriTestSignals parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriTestSignals parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriTestSignals parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriTestSignals parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriTestSignals parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriTestSignals parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriTestSignals prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriTestSignalsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriTestSignals_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriTestSignals_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriTestSignals.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        signals_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriTestSignals.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriTestSignals getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriTestSignals.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriTestSignals build() {
        abb.egmri.Egmri.EgmriTestSignals result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriTestSignals buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriTestSignals result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriTestSignals buildPartial() {
        abb.egmri.Egmri.EgmriTestSignals result = new abb.egmri.Egmri.EgmriTestSignals(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          signals_ = java.util.Collections.unmodifiableList(signals_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.signals_ = signals_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriTestSignals) {
          return mergeFrom((abb.egmri.Egmri.EgmriTestSignals)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriTestSignals other) {
        if (other == abb.egmri.Egmri.EgmriTestSignals.getDefaultInstance()) return this;
        if (!other.signals_.isEmpty()) {
          if (signals_.isEmpty()) {
            signals_ = other.signals_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSignalsIsMutable();
            signals_.addAll(other.signals_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 13: {
              ensureSignalsIsMutable();
              signals_.add(input.readFloat());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addSignals(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated float signals = 1;
      private java.util.List<java.lang.Float> signals_ = java.util.Collections.emptyList();;
      private void ensureSignalsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          signals_ = new java.util.ArrayList<java.lang.Float>(signals_);
          bitField0_ |= 0x00000001;
         }
      }
      public java.util.List<java.lang.Float>
          getSignalsList() {
        return java.util.Collections.unmodifiableList(signals_);
      }
      public int getSignalsCount() {
        return signals_.size();
      }
      public float getSignals(int index) {
        return signals_.get(index);
      }
      public Builder setSignals(
          int index, float value) {
        ensureSignalsIsMutable();
        signals_.set(index, value);
        onChanged();
        return this;
      }
      public Builder addSignals(float value) {
        ensureSignalsIsMutable();
        signals_.add(value);
        onChanged();
        return this;
      }
      public Builder addAllSignals(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureSignalsIsMutable();
        super.addAll(values, signals_);
        onChanged();
        return this;
      }
      public Builder clearSignals() {
        signals_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriTestSignals)
    }
    
    static {
      defaultInstance = new EgmriTestSignals(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriTestSignals)
  }
  
  public interface EgmriRobotOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .abb.egmri.EgmriHeader header = 1;
    boolean hasHeader();
    abb.egmri.Egmri.EgmriHeader getHeader();
    abb.egmri.Egmri.EgmriHeaderOrBuilder getHeaderOrBuilder();
    
    // optional .abb.egmri.EgmriFeedback feedback = 2;
    boolean hasFeedback();
    abb.egmri.Egmri.EgmriFeedback getFeedback();
    abb.egmri.Egmri.EgmriFeedbackOrBuilder getFeedbackOrBuilder();
    
    // optional .abb.egmri.EgmriPlanned planned = 3;
    boolean hasPlanned();
    abb.egmri.Egmri.EgmriPlanned getPlanned();
    abb.egmri.Egmri.EgmriPlannedOrBuilder getPlannedOrBuilder();
    
    // optional .abb.egmri.EgmriPIDParameters pidParameters = 4;
    boolean hasPidParameters();
    abb.egmri.Egmri.EgmriPIDParameters getPidParameters();
    abb.egmri.Egmri.EgmriPIDParametersOrBuilder getPidParametersOrBuilder();
    
    // optional .abb.egmri.EgmriMotorState motorState = 5;
    boolean hasMotorState();
    abb.egmri.Egmri.EgmriMotorState getMotorState();
    abb.egmri.Egmri.EgmriMotorStateOrBuilder getMotorStateOrBuilder();
    
    // optional .abb.egmri.EgmriMCIState mciState = 6;
    boolean hasMciState();
    abb.egmri.Egmri.EgmriMCIState getMciState();
    abb.egmri.Egmri.EgmriMCIStateOrBuilder getMciStateOrBuilder();
    
    // optional bool mciConvergenceMet = 7;
    boolean hasMciConvergenceMet();
    boolean getMciConvergenceMet();
    
    // optional .abb.egmri.EgmriTestSignals testSignals = 8;
    boolean hasTestSignals();
    abb.egmri.Egmri.EgmriTestSignals getTestSignals();
    abb.egmri.Egmri.EgmriTestSignalsOrBuilder getTestSignalsOrBuilder();
    
    // optional .abb.egmri.EgmriRapidCtrlExecState rapidExecState = 9;
    boolean hasRapidExecState();
    abb.egmri.Egmri.EgmriRapidCtrlExecState getRapidExecState();
    abb.egmri.Egmri.EgmriRapidCtrlExecStateOrBuilder getRapidExecStateOrBuilder();
  }
  public static final class EgmriRobot extends
      com.google.protobuf.GeneratedMessage
      implements EgmriRobotOrBuilder {
    // Use EgmriRobot.newBuilder() to construct.
    private EgmriRobot(Builder builder) {
      super(builder);
    }
    private EgmriRobot(boolean noInit) {}
    
    private static final EgmriRobot defaultInstance;
    public static EgmriRobot getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriRobot getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriRobot_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriRobot_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .abb.egmri.EgmriHeader header = 1;
    public static final int HEADER_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriHeader header_;
    public boolean hasHeader() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriHeader getHeader() {
      return header_;
    }
    public abb.egmri.Egmri.EgmriHeaderOrBuilder getHeaderOrBuilder() {
      return header_;
    }
    
    // optional .abb.egmri.EgmriFeedback feedback = 2;
    public static final int FEEDBACK_FIELD_NUMBER = 2;
    private abb.egmri.Egmri.EgmriFeedback feedback_;
    public boolean hasFeedback() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public abb.egmri.Egmri.EgmriFeedback getFeedback() {
      return feedback_;
    }
    public abb.egmri.Egmri.EgmriFeedbackOrBuilder getFeedbackOrBuilder() {
      return feedback_;
    }
    
    // optional .abb.egmri.EgmriPlanned planned = 3;
    public static final int PLANNED_FIELD_NUMBER = 3;
    private abb.egmri.Egmri.EgmriPlanned planned_;
    public boolean hasPlanned() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public abb.egmri.Egmri.EgmriPlanned getPlanned() {
      return planned_;
    }
    public abb.egmri.Egmri.EgmriPlannedOrBuilder getPlannedOrBuilder() {
      return planned_;
    }
    
    // optional .abb.egmri.EgmriPIDParameters pidParameters = 4;
    public static final int PIDPARAMETERS_FIELD_NUMBER = 4;
    private abb.egmri.Egmri.EgmriPIDParameters pidParameters_;
    public boolean hasPidParameters() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public abb.egmri.Egmri.EgmriPIDParameters getPidParameters() {
      return pidParameters_;
    }
    public abb.egmri.Egmri.EgmriPIDParametersOrBuilder getPidParametersOrBuilder() {
      return pidParameters_;
    }
    
    // optional .abb.egmri.EgmriMotorState motorState = 5;
    public static final int MOTORSTATE_FIELD_NUMBER = 5;
    private abb.egmri.Egmri.EgmriMotorState motorState_;
    public boolean hasMotorState() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public abb.egmri.Egmri.EgmriMotorState getMotorState() {
      return motorState_;
    }
    public abb.egmri.Egmri.EgmriMotorStateOrBuilder getMotorStateOrBuilder() {
      return motorState_;
    }
    
    // optional .abb.egmri.EgmriMCIState mciState = 6;
    public static final int MCISTATE_FIELD_NUMBER = 6;
    private abb.egmri.Egmri.EgmriMCIState mciState_;
    public boolean hasMciState() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public abb.egmri.Egmri.EgmriMCIState getMciState() {
      return mciState_;
    }
    public abb.egmri.Egmri.EgmriMCIStateOrBuilder getMciStateOrBuilder() {
      return mciState_;
    }
    
    // optional bool mciConvergenceMet = 7;
    public static final int MCICONVERGENCEMET_FIELD_NUMBER = 7;
    private boolean mciConvergenceMet_;
    public boolean hasMciConvergenceMet() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public boolean getMciConvergenceMet() {
      return mciConvergenceMet_;
    }
    
    // optional .abb.egmri.EgmriTestSignals testSignals = 8;
    public static final int TESTSIGNALS_FIELD_NUMBER = 8;
    private abb.egmri.Egmri.EgmriTestSignals testSignals_;
    public boolean hasTestSignals() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public abb.egmri.Egmri.EgmriTestSignals getTestSignals() {
      return testSignals_;
    }
    public abb.egmri.Egmri.EgmriTestSignalsOrBuilder getTestSignalsOrBuilder() {
      return testSignals_;
    }
    
    // optional .abb.egmri.EgmriRapidCtrlExecState rapidExecState = 9;
    public static final int RAPIDEXECSTATE_FIELD_NUMBER = 9;
    private abb.egmri.Egmri.EgmriRapidCtrlExecState rapidExecState_;
    public boolean hasRapidExecState() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public abb.egmri.Egmri.EgmriRapidCtrlExecState getRapidExecState() {
      return rapidExecState_;
    }
    public abb.egmri.Egmri.EgmriRapidCtrlExecStateOrBuilder getRapidExecStateOrBuilder() {
      return rapidExecState_;
    }
    
    private void initFields() {
      header_ = abb.egmri.Egmri.EgmriHeader.getDefaultInstance();
      feedback_ = abb.egmri.Egmri.EgmriFeedback.getDefaultInstance();
      planned_ = abb.egmri.Egmri.EgmriPlanned.getDefaultInstance();
      pidParameters_ = abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance();
      motorState_ = abb.egmri.Egmri.EgmriMotorState.getDefaultInstance();
      mciState_ = abb.egmri.Egmri.EgmriMCIState.getDefaultInstance();
      mciConvergenceMet_ = false;
      testSignals_ = abb.egmri.Egmri.EgmriTestSignals.getDefaultInstance();
      rapidExecState_ = abb.egmri.Egmri.EgmriRapidCtrlExecState.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (hasFeedback()) {
        if (!getFeedback().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPlanned()) {
        if (!getPlanned().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMotorState()) {
        if (!getMotorState().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMciState()) {
        if (!getMciState().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRapidExecState()) {
        if (!getRapidExecState().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, header_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, feedback_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, planned_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, pidParameters_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, motorState_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, mciState_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, mciConvergenceMet_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, testSignals_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, rapidExecState_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, header_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, feedback_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, planned_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, pidParameters_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, motorState_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, mciState_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, mciConvergenceMet_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, testSignals_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, rapidExecState_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriRobot parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRobot parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRobot parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRobot parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRobot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRobot parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRobot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriRobot parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriRobot parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriRobot parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriRobot prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriRobotOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriRobot_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriRobot_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriRobot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHeaderFieldBuilder();
          getFeedbackFieldBuilder();
          getPlannedFieldBuilder();
          getPidParametersFieldBuilder();
          getMotorStateFieldBuilder();
          getMciStateFieldBuilder();
          getTestSignalsFieldBuilder();
          getRapidExecStateFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = abb.egmri.Egmri.EgmriHeader.getDefaultInstance();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (feedbackBuilder_ == null) {
          feedback_ = abb.egmri.Egmri.EgmriFeedback.getDefaultInstance();
        } else {
          feedbackBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (plannedBuilder_ == null) {
          planned_ = abb.egmri.Egmri.EgmriPlanned.getDefaultInstance();
        } else {
          plannedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (pidParametersBuilder_ == null) {
          pidParameters_ = abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance();
        } else {
          pidParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (motorStateBuilder_ == null) {
          motorState_ = abb.egmri.Egmri.EgmriMotorState.getDefaultInstance();
        } else {
          motorStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (mciStateBuilder_ == null) {
          mciState_ = abb.egmri.Egmri.EgmriMCIState.getDefaultInstance();
        } else {
          mciStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        mciConvergenceMet_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (testSignalsBuilder_ == null) {
          testSignals_ = abb.egmri.Egmri.EgmriTestSignals.getDefaultInstance();
        } else {
          testSignalsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (rapidExecStateBuilder_ == null) {
          rapidExecState_ = abb.egmri.Egmri.EgmriRapidCtrlExecState.getDefaultInstance();
        } else {
          rapidExecStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriRobot.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriRobot getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriRobot.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriRobot build() {
        abb.egmri.Egmri.EgmriRobot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriRobot buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriRobot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriRobot buildPartial() {
        abb.egmri.Egmri.EgmriRobot result = new abb.egmri.Egmri.EgmriRobot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (headerBuilder_ == null) {
          result.header_ = header_;
        } else {
          result.header_ = headerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (feedbackBuilder_ == null) {
          result.feedback_ = feedback_;
        } else {
          result.feedback_ = feedbackBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (plannedBuilder_ == null) {
          result.planned_ = planned_;
        } else {
          result.planned_ = plannedBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (pidParametersBuilder_ == null) {
          result.pidParameters_ = pidParameters_;
        } else {
          result.pidParameters_ = pidParametersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (motorStateBuilder_ == null) {
          result.motorState_ = motorState_;
        } else {
          result.motorState_ = motorStateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (mciStateBuilder_ == null) {
          result.mciState_ = mciState_;
        } else {
          result.mciState_ = mciStateBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.mciConvergenceMet_ = mciConvergenceMet_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (testSignalsBuilder_ == null) {
          result.testSignals_ = testSignals_;
        } else {
          result.testSignals_ = testSignalsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (rapidExecStateBuilder_ == null) {
          result.rapidExecState_ = rapidExecState_;
        } else {
          result.rapidExecState_ = rapidExecStateBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriRobot) {
          return mergeFrom((abb.egmri.Egmri.EgmriRobot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriRobot other) {
        if (other == abb.egmri.Egmri.EgmriRobot.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.hasFeedback()) {
          mergeFeedback(other.getFeedback());
        }
        if (other.hasPlanned()) {
          mergePlanned(other.getPlanned());
        }
        if (other.hasPidParameters()) {
          mergePidParameters(other.getPidParameters());
        }
        if (other.hasMotorState()) {
          mergeMotorState(other.getMotorState());
        }
        if (other.hasMciState()) {
          mergeMciState(other.getMciState());
        }
        if (other.hasMciConvergenceMet()) {
          setMciConvergenceMet(other.getMciConvergenceMet());
        }
        if (other.hasTestSignals()) {
          mergeTestSignals(other.getTestSignals());
        }
        if (other.hasRapidExecState()) {
          mergeRapidExecState(other.getRapidExecState());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (hasFeedback()) {
          if (!getFeedback().isInitialized()) {
            
            return false;
          }
        }
        if (hasPlanned()) {
          if (!getPlanned().isInitialized()) {
            
            return false;
          }
        }
        if (hasMotorState()) {
          if (!getMotorState().isInitialized()) {
            
            return false;
          }
        }
        if (hasMciState()) {
          if (!getMciState().isInitialized()) {
            
            return false;
          }
        }
        if (hasRapidExecState()) {
          if (!getRapidExecState().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              abb.egmri.Egmri.EgmriHeader.Builder subBuilder = abb.egmri.Egmri.EgmriHeader.newBuilder();
              if (hasHeader()) {
                subBuilder.mergeFrom(getHeader());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHeader(subBuilder.buildPartial());
              break;
            }
            case 18: {
              abb.egmri.Egmri.EgmriFeedback.Builder subBuilder = abb.egmri.Egmri.EgmriFeedback.newBuilder();
              if (hasFeedback()) {
                subBuilder.mergeFrom(getFeedback());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setFeedback(subBuilder.buildPartial());
              break;
            }
            case 26: {
              abb.egmri.Egmri.EgmriPlanned.Builder subBuilder = abb.egmri.Egmri.EgmriPlanned.newBuilder();
              if (hasPlanned()) {
                subBuilder.mergeFrom(getPlanned());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPlanned(subBuilder.buildPartial());
              break;
            }
            case 34: {
              abb.egmri.Egmri.EgmriPIDParameters.Builder subBuilder = abb.egmri.Egmri.EgmriPIDParameters.newBuilder();
              if (hasPidParameters()) {
                subBuilder.mergeFrom(getPidParameters());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPidParameters(subBuilder.buildPartial());
              break;
            }
            case 42: {
              abb.egmri.Egmri.EgmriMotorState.Builder subBuilder = abb.egmri.Egmri.EgmriMotorState.newBuilder();
              if (hasMotorState()) {
                subBuilder.mergeFrom(getMotorState());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMotorState(subBuilder.buildPartial());
              break;
            }
            case 50: {
              abb.egmri.Egmri.EgmriMCIState.Builder subBuilder = abb.egmri.Egmri.EgmriMCIState.newBuilder();
              if (hasMciState()) {
                subBuilder.mergeFrom(getMciState());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setMciState(subBuilder.buildPartial());
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              mciConvergenceMet_ = input.readBool();
              break;
            }
            case 66: {
              abb.egmri.Egmri.EgmriTestSignals.Builder subBuilder = abb.egmri.Egmri.EgmriTestSignals.newBuilder();
              if (hasTestSignals()) {
                subBuilder.mergeFrom(getTestSignals());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTestSignals(subBuilder.buildPartial());
              break;
            }
            case 74: {
              abb.egmri.Egmri.EgmriRapidCtrlExecState.Builder subBuilder = abb.egmri.Egmri.EgmriRapidCtrlExecState.newBuilder();
              if (hasRapidExecState()) {
                subBuilder.mergeFrom(getRapidExecState());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRapidExecState(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .abb.egmri.EgmriHeader header = 1;
      private abb.egmri.Egmri.EgmriHeader header_ = abb.egmri.Egmri.EgmriHeader.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriHeader, abb.egmri.Egmri.EgmriHeader.Builder, abb.egmri.Egmri.EgmriHeaderOrBuilder> headerBuilder_;
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriHeader getHeader() {
        if (headerBuilder_ == null) {
          return header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      public Builder setHeader(abb.egmri.Egmri.EgmriHeader value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setHeader(
          abb.egmri.Egmri.EgmriHeader.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeHeader(abb.egmri.Egmri.EgmriHeader value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              header_ != abb.egmri.Egmri.EgmriHeader.getDefaultInstance()) {
            header_ =
              abb.egmri.Egmri.EgmriHeader.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = abb.egmri.Egmri.EgmriHeader.getDefaultInstance();
          onChanged();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public abb.egmri.Egmri.EgmriHeader.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriHeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriHeader, abb.egmri.Egmri.EgmriHeader.Builder, abb.egmri.Egmri.EgmriHeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriHeader, abb.egmri.Egmri.EgmriHeader.Builder, abb.egmri.Egmri.EgmriHeaderOrBuilder>(
                  header_,
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }
      
      // optional .abb.egmri.EgmriFeedback feedback = 2;
      private abb.egmri.Egmri.EgmriFeedback feedback_ = abb.egmri.Egmri.EgmriFeedback.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriFeedback, abb.egmri.Egmri.EgmriFeedback.Builder, abb.egmri.Egmri.EgmriFeedbackOrBuilder> feedbackBuilder_;
      public boolean hasFeedback() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public abb.egmri.Egmri.EgmriFeedback getFeedback() {
        if (feedbackBuilder_ == null) {
          return feedback_;
        } else {
          return feedbackBuilder_.getMessage();
        }
      }
      public Builder setFeedback(abb.egmri.Egmri.EgmriFeedback value) {
        if (feedbackBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          feedback_ = value;
          onChanged();
        } else {
          feedbackBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setFeedback(
          abb.egmri.Egmri.EgmriFeedback.Builder builderForValue) {
        if (feedbackBuilder_ == null) {
          feedback_ = builderForValue.build();
          onChanged();
        } else {
          feedbackBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeFeedback(abb.egmri.Egmri.EgmriFeedback value) {
        if (feedbackBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              feedback_ != abb.egmri.Egmri.EgmriFeedback.getDefaultInstance()) {
            feedback_ =
              abb.egmri.Egmri.EgmriFeedback.newBuilder(feedback_).mergeFrom(value).buildPartial();
          } else {
            feedback_ = value;
          }
          onChanged();
        } else {
          feedbackBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearFeedback() {
        if (feedbackBuilder_ == null) {
          feedback_ = abb.egmri.Egmri.EgmriFeedback.getDefaultInstance();
          onChanged();
        } else {
          feedbackBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public abb.egmri.Egmri.EgmriFeedback.Builder getFeedbackBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getFeedbackFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriFeedbackOrBuilder getFeedbackOrBuilder() {
        if (feedbackBuilder_ != null) {
          return feedbackBuilder_.getMessageOrBuilder();
        } else {
          return feedback_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriFeedback, abb.egmri.Egmri.EgmriFeedback.Builder, abb.egmri.Egmri.EgmriFeedbackOrBuilder> 
          getFeedbackFieldBuilder() {
        if (feedbackBuilder_ == null) {
          feedbackBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriFeedback, abb.egmri.Egmri.EgmriFeedback.Builder, abb.egmri.Egmri.EgmriFeedbackOrBuilder>(
                  feedback_,
                  getParentForChildren(),
                  isClean());
          feedback_ = null;
        }
        return feedbackBuilder_;
      }
      
      // optional .abb.egmri.EgmriPlanned planned = 3;
      private abb.egmri.Egmri.EgmriPlanned planned_ = abb.egmri.Egmri.EgmriPlanned.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPlanned, abb.egmri.Egmri.EgmriPlanned.Builder, abb.egmri.Egmri.EgmriPlannedOrBuilder> plannedBuilder_;
      public boolean hasPlanned() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public abb.egmri.Egmri.EgmriPlanned getPlanned() {
        if (plannedBuilder_ == null) {
          return planned_;
        } else {
          return plannedBuilder_.getMessage();
        }
      }
      public Builder setPlanned(abb.egmri.Egmri.EgmriPlanned value) {
        if (plannedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          planned_ = value;
          onChanged();
        } else {
          plannedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setPlanned(
          abb.egmri.Egmri.EgmriPlanned.Builder builderForValue) {
        if (plannedBuilder_ == null) {
          planned_ = builderForValue.build();
          onChanged();
        } else {
          plannedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergePlanned(abb.egmri.Egmri.EgmriPlanned value) {
        if (plannedBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              planned_ != abb.egmri.Egmri.EgmriPlanned.getDefaultInstance()) {
            planned_ =
              abb.egmri.Egmri.EgmriPlanned.newBuilder(planned_).mergeFrom(value).buildPartial();
          } else {
            planned_ = value;
          }
          onChanged();
        } else {
          plannedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearPlanned() {
        if (plannedBuilder_ == null) {
          planned_ = abb.egmri.Egmri.EgmriPlanned.getDefaultInstance();
          onChanged();
        } else {
          plannedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public abb.egmri.Egmri.EgmriPlanned.Builder getPlannedBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getPlannedFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriPlannedOrBuilder getPlannedOrBuilder() {
        if (plannedBuilder_ != null) {
          return plannedBuilder_.getMessageOrBuilder();
        } else {
          return planned_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPlanned, abb.egmri.Egmri.EgmriPlanned.Builder, abb.egmri.Egmri.EgmriPlannedOrBuilder> 
          getPlannedFieldBuilder() {
        if (plannedBuilder_ == null) {
          plannedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriPlanned, abb.egmri.Egmri.EgmriPlanned.Builder, abb.egmri.Egmri.EgmriPlannedOrBuilder>(
                  planned_,
                  getParentForChildren(),
                  isClean());
          planned_ = null;
        }
        return plannedBuilder_;
      }
      
      // optional .abb.egmri.EgmriPIDParameters pidParameters = 4;
      private abb.egmri.Egmri.EgmriPIDParameters pidParameters_ = abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPIDParameters, abb.egmri.Egmri.EgmriPIDParameters.Builder, abb.egmri.Egmri.EgmriPIDParametersOrBuilder> pidParametersBuilder_;
      public boolean hasPidParameters() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public abb.egmri.Egmri.EgmriPIDParameters getPidParameters() {
        if (pidParametersBuilder_ == null) {
          return pidParameters_;
        } else {
          return pidParametersBuilder_.getMessage();
        }
      }
      public Builder setPidParameters(abb.egmri.Egmri.EgmriPIDParameters value) {
        if (pidParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pidParameters_ = value;
          onChanged();
        } else {
          pidParametersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder setPidParameters(
          abb.egmri.Egmri.EgmriPIDParameters.Builder builderForValue) {
        if (pidParametersBuilder_ == null) {
          pidParameters_ = builderForValue.build();
          onChanged();
        } else {
          pidParametersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder mergePidParameters(abb.egmri.Egmri.EgmriPIDParameters value) {
        if (pidParametersBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              pidParameters_ != abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance()) {
            pidParameters_ =
              abb.egmri.Egmri.EgmriPIDParameters.newBuilder(pidParameters_).mergeFrom(value).buildPartial();
          } else {
            pidParameters_ = value;
          }
          onChanged();
        } else {
          pidParametersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder clearPidParameters() {
        if (pidParametersBuilder_ == null) {
          pidParameters_ = abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance();
          onChanged();
        } else {
          pidParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      public abb.egmri.Egmri.EgmriPIDParameters.Builder getPidParametersBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getPidParametersFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriPIDParametersOrBuilder getPidParametersOrBuilder() {
        if (pidParametersBuilder_ != null) {
          return pidParametersBuilder_.getMessageOrBuilder();
        } else {
          return pidParameters_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPIDParameters, abb.egmri.Egmri.EgmriPIDParameters.Builder, abb.egmri.Egmri.EgmriPIDParametersOrBuilder> 
          getPidParametersFieldBuilder() {
        if (pidParametersBuilder_ == null) {
          pidParametersBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriPIDParameters, abb.egmri.Egmri.EgmriPIDParameters.Builder, abb.egmri.Egmri.EgmriPIDParametersOrBuilder>(
                  pidParameters_,
                  getParentForChildren(),
                  isClean());
          pidParameters_ = null;
        }
        return pidParametersBuilder_;
      }
      
      // optional .abb.egmri.EgmriMotorState motorState = 5;
      private abb.egmri.Egmri.EgmriMotorState motorState_ = abb.egmri.Egmri.EgmriMotorState.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriMotorState, abb.egmri.Egmri.EgmriMotorState.Builder, abb.egmri.Egmri.EgmriMotorStateOrBuilder> motorStateBuilder_;
      public boolean hasMotorState() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public abb.egmri.Egmri.EgmriMotorState getMotorState() {
        if (motorStateBuilder_ == null) {
          return motorState_;
        } else {
          return motorStateBuilder_.getMessage();
        }
      }
      public Builder setMotorState(abb.egmri.Egmri.EgmriMotorState value) {
        if (motorStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          motorState_ = value;
          onChanged();
        } else {
          motorStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder setMotorState(
          abb.egmri.Egmri.EgmriMotorState.Builder builderForValue) {
        if (motorStateBuilder_ == null) {
          motorState_ = builderForValue.build();
          onChanged();
        } else {
          motorStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder mergeMotorState(abb.egmri.Egmri.EgmriMotorState value) {
        if (motorStateBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              motorState_ != abb.egmri.Egmri.EgmriMotorState.getDefaultInstance()) {
            motorState_ =
              abb.egmri.Egmri.EgmriMotorState.newBuilder(motorState_).mergeFrom(value).buildPartial();
          } else {
            motorState_ = value;
          }
          onChanged();
        } else {
          motorStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder clearMotorState() {
        if (motorStateBuilder_ == null) {
          motorState_ = abb.egmri.Egmri.EgmriMotorState.getDefaultInstance();
          onChanged();
        } else {
          motorStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      public abb.egmri.Egmri.EgmriMotorState.Builder getMotorStateBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getMotorStateFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriMotorStateOrBuilder getMotorStateOrBuilder() {
        if (motorStateBuilder_ != null) {
          return motorStateBuilder_.getMessageOrBuilder();
        } else {
          return motorState_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriMotorState, abb.egmri.Egmri.EgmriMotorState.Builder, abb.egmri.Egmri.EgmriMotorStateOrBuilder> 
          getMotorStateFieldBuilder() {
        if (motorStateBuilder_ == null) {
          motorStateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriMotorState, abb.egmri.Egmri.EgmriMotorState.Builder, abb.egmri.Egmri.EgmriMotorStateOrBuilder>(
                  motorState_,
                  getParentForChildren(),
                  isClean());
          motorState_ = null;
        }
        return motorStateBuilder_;
      }
      
      // optional .abb.egmri.EgmriMCIState mciState = 6;
      private abb.egmri.Egmri.EgmriMCIState mciState_ = abb.egmri.Egmri.EgmriMCIState.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriMCIState, abb.egmri.Egmri.EgmriMCIState.Builder, abb.egmri.Egmri.EgmriMCIStateOrBuilder> mciStateBuilder_;
      public boolean hasMciState() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public abb.egmri.Egmri.EgmriMCIState getMciState() {
        if (mciStateBuilder_ == null) {
          return mciState_;
        } else {
          return mciStateBuilder_.getMessage();
        }
      }
      public Builder setMciState(abb.egmri.Egmri.EgmriMCIState value) {
        if (mciStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mciState_ = value;
          onChanged();
        } else {
          mciStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder setMciState(
          abb.egmri.Egmri.EgmriMCIState.Builder builderForValue) {
        if (mciStateBuilder_ == null) {
          mciState_ = builderForValue.build();
          onChanged();
        } else {
          mciStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder mergeMciState(abb.egmri.Egmri.EgmriMCIState value) {
        if (mciStateBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              mciState_ != abb.egmri.Egmri.EgmriMCIState.getDefaultInstance()) {
            mciState_ =
              abb.egmri.Egmri.EgmriMCIState.newBuilder(mciState_).mergeFrom(value).buildPartial();
          } else {
            mciState_ = value;
          }
          onChanged();
        } else {
          mciStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder clearMciState() {
        if (mciStateBuilder_ == null) {
          mciState_ = abb.egmri.Egmri.EgmriMCIState.getDefaultInstance();
          onChanged();
        } else {
          mciStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      public abb.egmri.Egmri.EgmriMCIState.Builder getMciStateBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getMciStateFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriMCIStateOrBuilder getMciStateOrBuilder() {
        if (mciStateBuilder_ != null) {
          return mciStateBuilder_.getMessageOrBuilder();
        } else {
          return mciState_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriMCIState, abb.egmri.Egmri.EgmriMCIState.Builder, abb.egmri.Egmri.EgmriMCIStateOrBuilder> 
          getMciStateFieldBuilder() {
        if (mciStateBuilder_ == null) {
          mciStateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriMCIState, abb.egmri.Egmri.EgmriMCIState.Builder, abb.egmri.Egmri.EgmriMCIStateOrBuilder>(
                  mciState_,
                  getParentForChildren(),
                  isClean());
          mciState_ = null;
        }
        return mciStateBuilder_;
      }
      
      // optional bool mciConvergenceMet = 7;
      private boolean mciConvergenceMet_ ;
      public boolean hasMciConvergenceMet() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public boolean getMciConvergenceMet() {
        return mciConvergenceMet_;
      }
      public Builder setMciConvergenceMet(boolean value) {
        bitField0_ |= 0x00000040;
        mciConvergenceMet_ = value;
        onChanged();
        return this;
      }
      public Builder clearMciConvergenceMet() {
        bitField0_ = (bitField0_ & ~0x00000040);
        mciConvergenceMet_ = false;
        onChanged();
        return this;
      }
      
      // optional .abb.egmri.EgmriTestSignals testSignals = 8;
      private abb.egmri.Egmri.EgmriTestSignals testSignals_ = abb.egmri.Egmri.EgmriTestSignals.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriTestSignals, abb.egmri.Egmri.EgmriTestSignals.Builder, abb.egmri.Egmri.EgmriTestSignalsOrBuilder> testSignalsBuilder_;
      public boolean hasTestSignals() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public abb.egmri.Egmri.EgmriTestSignals getTestSignals() {
        if (testSignalsBuilder_ == null) {
          return testSignals_;
        } else {
          return testSignalsBuilder_.getMessage();
        }
      }
      public Builder setTestSignals(abb.egmri.Egmri.EgmriTestSignals value) {
        if (testSignalsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          testSignals_ = value;
          onChanged();
        } else {
          testSignalsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      public Builder setTestSignals(
          abb.egmri.Egmri.EgmriTestSignals.Builder builderForValue) {
        if (testSignalsBuilder_ == null) {
          testSignals_ = builderForValue.build();
          onChanged();
        } else {
          testSignalsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      public Builder mergeTestSignals(abb.egmri.Egmri.EgmriTestSignals value) {
        if (testSignalsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              testSignals_ != abb.egmri.Egmri.EgmriTestSignals.getDefaultInstance()) {
            testSignals_ =
              abb.egmri.Egmri.EgmriTestSignals.newBuilder(testSignals_).mergeFrom(value).buildPartial();
          } else {
            testSignals_ = value;
          }
          onChanged();
        } else {
          testSignalsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      public Builder clearTestSignals() {
        if (testSignalsBuilder_ == null) {
          testSignals_ = abb.egmri.Egmri.EgmriTestSignals.getDefaultInstance();
          onChanged();
        } else {
          testSignalsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      public abb.egmri.Egmri.EgmriTestSignals.Builder getTestSignalsBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getTestSignalsFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriTestSignalsOrBuilder getTestSignalsOrBuilder() {
        if (testSignalsBuilder_ != null) {
          return testSignalsBuilder_.getMessageOrBuilder();
        } else {
          return testSignals_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriTestSignals, abb.egmri.Egmri.EgmriTestSignals.Builder, abb.egmri.Egmri.EgmriTestSignalsOrBuilder> 
          getTestSignalsFieldBuilder() {
        if (testSignalsBuilder_ == null) {
          testSignalsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriTestSignals, abb.egmri.Egmri.EgmriTestSignals.Builder, abb.egmri.Egmri.EgmriTestSignalsOrBuilder>(
                  testSignals_,
                  getParentForChildren(),
                  isClean());
          testSignals_ = null;
        }
        return testSignalsBuilder_;
      }
      
      // optional .abb.egmri.EgmriRapidCtrlExecState rapidExecState = 9;
      private abb.egmri.Egmri.EgmriRapidCtrlExecState rapidExecState_ = abb.egmri.Egmri.EgmriRapidCtrlExecState.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriRapidCtrlExecState, abb.egmri.Egmri.EgmriRapidCtrlExecState.Builder, abb.egmri.Egmri.EgmriRapidCtrlExecStateOrBuilder> rapidExecStateBuilder_;
      public boolean hasRapidExecState() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public abb.egmri.Egmri.EgmriRapidCtrlExecState getRapidExecState() {
        if (rapidExecStateBuilder_ == null) {
          return rapidExecState_;
        } else {
          return rapidExecStateBuilder_.getMessage();
        }
      }
      public Builder setRapidExecState(abb.egmri.Egmri.EgmriRapidCtrlExecState value) {
        if (rapidExecStateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rapidExecState_ = value;
          onChanged();
        } else {
          rapidExecStateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      public Builder setRapidExecState(
          abb.egmri.Egmri.EgmriRapidCtrlExecState.Builder builderForValue) {
        if (rapidExecStateBuilder_ == null) {
          rapidExecState_ = builderForValue.build();
          onChanged();
        } else {
          rapidExecStateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      public Builder mergeRapidExecState(abb.egmri.Egmri.EgmriRapidCtrlExecState value) {
        if (rapidExecStateBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              rapidExecState_ != abb.egmri.Egmri.EgmriRapidCtrlExecState.getDefaultInstance()) {
            rapidExecState_ =
              abb.egmri.Egmri.EgmriRapidCtrlExecState.newBuilder(rapidExecState_).mergeFrom(value).buildPartial();
          } else {
            rapidExecState_ = value;
          }
          onChanged();
        } else {
          rapidExecStateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      public Builder clearRapidExecState() {
        if (rapidExecStateBuilder_ == null) {
          rapidExecState_ = abb.egmri.Egmri.EgmriRapidCtrlExecState.getDefaultInstance();
          onChanged();
        } else {
          rapidExecStateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      public abb.egmri.Egmri.EgmriRapidCtrlExecState.Builder getRapidExecStateBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getRapidExecStateFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriRapidCtrlExecStateOrBuilder getRapidExecStateOrBuilder() {
        if (rapidExecStateBuilder_ != null) {
          return rapidExecStateBuilder_.getMessageOrBuilder();
        } else {
          return rapidExecState_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriRapidCtrlExecState, abb.egmri.Egmri.EgmriRapidCtrlExecState.Builder, abb.egmri.Egmri.EgmriRapidCtrlExecStateOrBuilder> 
          getRapidExecStateFieldBuilder() {
        if (rapidExecStateBuilder_ == null) {
          rapidExecStateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriRapidCtrlExecState, abb.egmri.Egmri.EgmriRapidCtrlExecState.Builder, abb.egmri.Egmri.EgmriRapidCtrlExecStateOrBuilder>(
                  rapidExecState_,
                  getParentForChildren(),
                  isClean());
          rapidExecState_ = null;
        }
        return rapidExecStateBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriRobot)
    }
    
    static {
      defaultInstance = new EgmriRobot(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriRobot)
  }
  
  public interface EgmriSensorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // optional .abb.egmri.EgmriHeader header = 1;
    boolean hasHeader();
    abb.egmri.Egmri.EgmriHeader getHeader();
    abb.egmri.Egmri.EgmriHeaderOrBuilder getHeaderOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace positionReferences = 2;
    boolean hasPositionReferences();
    abb.egmri.Egmri.EgmriJointSpace getPositionReferences();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getPositionReferencesOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace speedReferences = 3;
    boolean hasSpeedReferences();
    abb.egmri.Egmri.EgmriJointSpace getSpeedReferences();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getSpeedReferencesOrBuilder();
    
    // optional .abb.egmri.EgmriJointSpace torqueFeedforward = 4;
    boolean hasTorqueFeedforward();
    abb.egmri.Egmri.EgmriJointSpace getTorqueFeedforward();
    abb.egmri.Egmri.EgmriJointSpaceOrBuilder getTorqueFeedforwardOrBuilder();
    
    // optional .abb.egmri.EgmriPIDParameters pidParameters = 5;
    boolean hasPidParameters();
    abb.egmri.Egmri.EgmriPIDParameters getPidParameters();
    abb.egmri.Egmri.EgmriPIDParametersOrBuilder getPidParametersOrBuilder();
  }
  public static final class EgmriSensor extends
      com.google.protobuf.GeneratedMessage
      implements EgmriSensorOrBuilder {
    // Use EgmriSensor.newBuilder() to construct.
    private EgmriSensor(Builder builder) {
      super(builder);
    }
    private EgmriSensor(boolean noInit) {}
    
    private static final EgmriSensor defaultInstance;
    public static EgmriSensor getDefaultInstance() {
      return defaultInstance;
    }
    
    public EgmriSensor getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriSensor_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return abb.egmri.Egmri.internal_static_abb_egmri_EgmriSensor_fieldAccessorTable;
    }
    
    private int bitField0_;
    // optional .abb.egmri.EgmriHeader header = 1;
    public static final int HEADER_FIELD_NUMBER = 1;
    private abb.egmri.Egmri.EgmriHeader header_;
    public boolean hasHeader() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public abb.egmri.Egmri.EgmriHeader getHeader() {
      return header_;
    }
    public abb.egmri.Egmri.EgmriHeaderOrBuilder getHeaderOrBuilder() {
      return header_;
    }
    
    // optional .abb.egmri.EgmriJointSpace positionReferences = 2;
    public static final int POSITIONREFERENCES_FIELD_NUMBER = 2;
    private abb.egmri.Egmri.EgmriJointSpace positionReferences_;
    public boolean hasPositionReferences() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public abb.egmri.Egmri.EgmriJointSpace getPositionReferences() {
      return positionReferences_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getPositionReferencesOrBuilder() {
      return positionReferences_;
    }
    
    // optional .abb.egmri.EgmriJointSpace speedReferences = 3;
    public static final int SPEEDREFERENCES_FIELD_NUMBER = 3;
    private abb.egmri.Egmri.EgmriJointSpace speedReferences_;
    public boolean hasSpeedReferences() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public abb.egmri.Egmri.EgmriJointSpace getSpeedReferences() {
      return speedReferences_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getSpeedReferencesOrBuilder() {
      return speedReferences_;
    }
    
    // optional .abb.egmri.EgmriJointSpace torqueFeedforward = 4;
    public static final int TORQUEFEEDFORWARD_FIELD_NUMBER = 4;
    private abb.egmri.Egmri.EgmriJointSpace torqueFeedforward_;
    public boolean hasTorqueFeedforward() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public abb.egmri.Egmri.EgmriJointSpace getTorqueFeedforward() {
      return torqueFeedforward_;
    }
    public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getTorqueFeedforwardOrBuilder() {
      return torqueFeedforward_;
    }
    
    // optional .abb.egmri.EgmriPIDParameters pidParameters = 5;
    public static final int PIDPARAMETERS_FIELD_NUMBER = 5;
    private abb.egmri.Egmri.EgmriPIDParameters pidParameters_;
    public boolean hasPidParameters() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public abb.egmri.Egmri.EgmriPIDParameters getPidParameters() {
      return pidParameters_;
    }
    public abb.egmri.Egmri.EgmriPIDParametersOrBuilder getPidParametersOrBuilder() {
      return pidParameters_;
    }
    
    private void initFields() {
      header_ = abb.egmri.Egmri.EgmriHeader.getDefaultInstance();
      positionReferences_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      speedReferences_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      torqueFeedforward_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      pidParameters_ = abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, header_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, positionReferences_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, speedReferences_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, torqueFeedforward_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, pidParameters_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, header_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, positionReferences_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, speedReferences_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, torqueFeedforward_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, pidParameters_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static abb.egmri.Egmri.EgmriSensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriSensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriSensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriSensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriSensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriSensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static abb.egmri.Egmri.EgmriSensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriSensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static abb.egmri.Egmri.EgmriSensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static abb.egmri.Egmri.EgmriSensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(abb.egmri.Egmri.EgmriSensor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements abb.egmri.Egmri.EgmriSensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriSensor_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return abb.egmri.Egmri.internal_static_abb_egmri_EgmriSensor_fieldAccessorTable;
      }
      
      // Construct using abb.egmri.Egmri.EgmriSensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHeaderFieldBuilder();
          getPositionReferencesFieldBuilder();
          getSpeedReferencesFieldBuilder();
          getTorqueFeedforwardFieldBuilder();
          getPidParametersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = abb.egmri.Egmri.EgmriHeader.getDefaultInstance();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (positionReferencesBuilder_ == null) {
          positionReferences_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          positionReferencesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (speedReferencesBuilder_ == null) {
          speedReferences_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          speedReferencesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (torqueFeedforwardBuilder_ == null) {
          torqueFeedforward_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
        } else {
          torqueFeedforwardBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (pidParametersBuilder_ == null) {
          pidParameters_ = abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance();
        } else {
          pidParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return abb.egmri.Egmri.EgmriSensor.getDescriptor();
      }
      
      public abb.egmri.Egmri.EgmriSensor getDefaultInstanceForType() {
        return abb.egmri.Egmri.EgmriSensor.getDefaultInstance();
      }
      
      public abb.egmri.Egmri.EgmriSensor build() {
        abb.egmri.Egmri.EgmriSensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private abb.egmri.Egmri.EgmriSensor buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        abb.egmri.Egmri.EgmriSensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public abb.egmri.Egmri.EgmriSensor buildPartial() {
        abb.egmri.Egmri.EgmriSensor result = new abb.egmri.Egmri.EgmriSensor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (headerBuilder_ == null) {
          result.header_ = header_;
        } else {
          result.header_ = headerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (positionReferencesBuilder_ == null) {
          result.positionReferences_ = positionReferences_;
        } else {
          result.positionReferences_ = positionReferencesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (speedReferencesBuilder_ == null) {
          result.speedReferences_ = speedReferences_;
        } else {
          result.speedReferences_ = speedReferencesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (torqueFeedforwardBuilder_ == null) {
          result.torqueFeedforward_ = torqueFeedforward_;
        } else {
          result.torqueFeedforward_ = torqueFeedforwardBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (pidParametersBuilder_ == null) {
          result.pidParameters_ = pidParameters_;
        } else {
          result.pidParameters_ = pidParametersBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof abb.egmri.Egmri.EgmriSensor) {
          return mergeFrom((abb.egmri.Egmri.EgmriSensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(abb.egmri.Egmri.EgmriSensor other) {
        if (other == abb.egmri.Egmri.EgmriSensor.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.hasPositionReferences()) {
          mergePositionReferences(other.getPositionReferences());
        }
        if (other.hasSpeedReferences()) {
          mergeSpeedReferences(other.getSpeedReferences());
        }
        if (other.hasTorqueFeedforward()) {
          mergeTorqueFeedforward(other.getTorqueFeedforward());
        }
        if (other.hasPidParameters()) {
          mergePidParameters(other.getPidParameters());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              abb.egmri.Egmri.EgmriHeader.Builder subBuilder = abb.egmri.Egmri.EgmriHeader.newBuilder();
              if (hasHeader()) {
                subBuilder.mergeFrom(getHeader());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHeader(subBuilder.buildPartial());
              break;
            }
            case 18: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasPositionReferences()) {
                subBuilder.mergeFrom(getPositionReferences());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPositionReferences(subBuilder.buildPartial());
              break;
            }
            case 26: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasSpeedReferences()) {
                subBuilder.mergeFrom(getSpeedReferences());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSpeedReferences(subBuilder.buildPartial());
              break;
            }
            case 34: {
              abb.egmri.Egmri.EgmriJointSpace.Builder subBuilder = abb.egmri.Egmri.EgmriJointSpace.newBuilder();
              if (hasTorqueFeedforward()) {
                subBuilder.mergeFrom(getTorqueFeedforward());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTorqueFeedforward(subBuilder.buildPartial());
              break;
            }
            case 42: {
              abb.egmri.Egmri.EgmriPIDParameters.Builder subBuilder = abb.egmri.Egmri.EgmriPIDParameters.newBuilder();
              if (hasPidParameters()) {
                subBuilder.mergeFrom(getPidParameters());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPidParameters(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // optional .abb.egmri.EgmriHeader header = 1;
      private abb.egmri.Egmri.EgmriHeader header_ = abb.egmri.Egmri.EgmriHeader.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriHeader, abb.egmri.Egmri.EgmriHeader.Builder, abb.egmri.Egmri.EgmriHeaderOrBuilder> headerBuilder_;
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public abb.egmri.Egmri.EgmriHeader getHeader() {
        if (headerBuilder_ == null) {
          return header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      public Builder setHeader(abb.egmri.Egmri.EgmriHeader value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder setHeader(
          abb.egmri.Egmri.EgmriHeader.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder mergeHeader(abb.egmri.Egmri.EgmriHeader value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              header_ != abb.egmri.Egmri.EgmriHeader.getDefaultInstance()) {
            header_ =
              abb.egmri.Egmri.EgmriHeader.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = abb.egmri.Egmri.EgmriHeader.getDefaultInstance();
          onChanged();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      public abb.egmri.Egmri.EgmriHeader.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriHeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriHeader, abb.egmri.Egmri.EgmriHeader.Builder, abb.egmri.Egmri.EgmriHeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriHeader, abb.egmri.Egmri.EgmriHeader.Builder, abb.egmri.Egmri.EgmriHeaderOrBuilder>(
                  header_,
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace positionReferences = 2;
      private abb.egmri.Egmri.EgmriJointSpace positionReferences_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> positionReferencesBuilder_;
      public boolean hasPositionReferences() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public abb.egmri.Egmri.EgmriJointSpace getPositionReferences() {
        if (positionReferencesBuilder_ == null) {
          return positionReferences_;
        } else {
          return positionReferencesBuilder_.getMessage();
        }
      }
      public Builder setPositionReferences(abb.egmri.Egmri.EgmriJointSpace value) {
        if (positionReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          positionReferences_ = value;
          onChanged();
        } else {
          positionReferencesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setPositionReferences(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (positionReferencesBuilder_ == null) {
          positionReferences_ = builderForValue.build();
          onChanged();
        } else {
          positionReferencesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergePositionReferences(abb.egmri.Egmri.EgmriJointSpace value) {
        if (positionReferencesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              positionReferences_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            positionReferences_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(positionReferences_).mergeFrom(value).buildPartial();
          } else {
            positionReferences_ = value;
          }
          onChanged();
        } else {
          positionReferencesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearPositionReferences() {
        if (positionReferencesBuilder_ == null) {
          positionReferences_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          positionReferencesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getPositionReferencesBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getPositionReferencesFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getPositionReferencesOrBuilder() {
        if (positionReferencesBuilder_ != null) {
          return positionReferencesBuilder_.getMessageOrBuilder();
        } else {
          return positionReferences_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getPositionReferencesFieldBuilder() {
        if (positionReferencesBuilder_ == null) {
          positionReferencesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  positionReferences_,
                  getParentForChildren(),
                  isClean());
          positionReferences_ = null;
        }
        return positionReferencesBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace speedReferences = 3;
      private abb.egmri.Egmri.EgmriJointSpace speedReferences_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> speedReferencesBuilder_;
      public boolean hasSpeedReferences() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public abb.egmri.Egmri.EgmriJointSpace getSpeedReferences() {
        if (speedReferencesBuilder_ == null) {
          return speedReferences_;
        } else {
          return speedReferencesBuilder_.getMessage();
        }
      }
      public Builder setSpeedReferences(abb.egmri.Egmri.EgmriJointSpace value) {
        if (speedReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          speedReferences_ = value;
          onChanged();
        } else {
          speedReferencesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setSpeedReferences(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (speedReferencesBuilder_ == null) {
          speedReferences_ = builderForValue.build();
          onChanged();
        } else {
          speedReferencesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeSpeedReferences(abb.egmri.Egmri.EgmriJointSpace value) {
        if (speedReferencesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              speedReferences_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            speedReferences_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(speedReferences_).mergeFrom(value).buildPartial();
          } else {
            speedReferences_ = value;
          }
          onChanged();
        } else {
          speedReferencesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearSpeedReferences() {
        if (speedReferencesBuilder_ == null) {
          speedReferences_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          speedReferencesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getSpeedReferencesBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSpeedReferencesFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getSpeedReferencesOrBuilder() {
        if (speedReferencesBuilder_ != null) {
          return speedReferencesBuilder_.getMessageOrBuilder();
        } else {
          return speedReferences_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getSpeedReferencesFieldBuilder() {
        if (speedReferencesBuilder_ == null) {
          speedReferencesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  speedReferences_,
                  getParentForChildren(),
                  isClean());
          speedReferences_ = null;
        }
        return speedReferencesBuilder_;
      }
      
      // optional .abb.egmri.EgmriJointSpace torqueFeedforward = 4;
      private abb.egmri.Egmri.EgmriJointSpace torqueFeedforward_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> torqueFeedforwardBuilder_;
      public boolean hasTorqueFeedforward() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public abb.egmri.Egmri.EgmriJointSpace getTorqueFeedforward() {
        if (torqueFeedforwardBuilder_ == null) {
          return torqueFeedforward_;
        } else {
          return torqueFeedforwardBuilder_.getMessage();
        }
      }
      public Builder setTorqueFeedforward(abb.egmri.Egmri.EgmriJointSpace value) {
        if (torqueFeedforwardBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          torqueFeedforward_ = value;
          onChanged();
        } else {
          torqueFeedforwardBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder setTorqueFeedforward(
          abb.egmri.Egmri.EgmriJointSpace.Builder builderForValue) {
        if (torqueFeedforwardBuilder_ == null) {
          torqueFeedforward_ = builderForValue.build();
          onChanged();
        } else {
          torqueFeedforwardBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder mergeTorqueFeedforward(abb.egmri.Egmri.EgmriJointSpace value) {
        if (torqueFeedforwardBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              torqueFeedforward_ != abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance()) {
            torqueFeedforward_ =
              abb.egmri.Egmri.EgmriJointSpace.newBuilder(torqueFeedforward_).mergeFrom(value).buildPartial();
          } else {
            torqueFeedforward_ = value;
          }
          onChanged();
        } else {
          torqueFeedforwardBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder clearTorqueFeedforward() {
        if (torqueFeedforwardBuilder_ == null) {
          torqueFeedforward_ = abb.egmri.Egmri.EgmriJointSpace.getDefaultInstance();
          onChanged();
        } else {
          torqueFeedforwardBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      public abb.egmri.Egmri.EgmriJointSpace.Builder getTorqueFeedforwardBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getTorqueFeedforwardFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriJointSpaceOrBuilder getTorqueFeedforwardOrBuilder() {
        if (torqueFeedforwardBuilder_ != null) {
          return torqueFeedforwardBuilder_.getMessageOrBuilder();
        } else {
          return torqueFeedforward_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder> 
          getTorqueFeedforwardFieldBuilder() {
        if (torqueFeedforwardBuilder_ == null) {
          torqueFeedforwardBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriJointSpace, abb.egmri.Egmri.EgmriJointSpace.Builder, abb.egmri.Egmri.EgmriJointSpaceOrBuilder>(
                  torqueFeedforward_,
                  getParentForChildren(),
                  isClean());
          torqueFeedforward_ = null;
        }
        return torqueFeedforwardBuilder_;
      }
      
      // optional .abb.egmri.EgmriPIDParameters pidParameters = 5;
      private abb.egmri.Egmri.EgmriPIDParameters pidParameters_ = abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPIDParameters, abb.egmri.Egmri.EgmriPIDParameters.Builder, abb.egmri.Egmri.EgmriPIDParametersOrBuilder> pidParametersBuilder_;
      public boolean hasPidParameters() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public abb.egmri.Egmri.EgmriPIDParameters getPidParameters() {
        if (pidParametersBuilder_ == null) {
          return pidParameters_;
        } else {
          return pidParametersBuilder_.getMessage();
        }
      }
      public Builder setPidParameters(abb.egmri.Egmri.EgmriPIDParameters value) {
        if (pidParametersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pidParameters_ = value;
          onChanged();
        } else {
          pidParametersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder setPidParameters(
          abb.egmri.Egmri.EgmriPIDParameters.Builder builderForValue) {
        if (pidParametersBuilder_ == null) {
          pidParameters_ = builderForValue.build();
          onChanged();
        } else {
          pidParametersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder mergePidParameters(abb.egmri.Egmri.EgmriPIDParameters value) {
        if (pidParametersBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              pidParameters_ != abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance()) {
            pidParameters_ =
              abb.egmri.Egmri.EgmriPIDParameters.newBuilder(pidParameters_).mergeFrom(value).buildPartial();
          } else {
            pidParameters_ = value;
          }
          onChanged();
        } else {
          pidParametersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder clearPidParameters() {
        if (pidParametersBuilder_ == null) {
          pidParameters_ = abb.egmri.Egmri.EgmriPIDParameters.getDefaultInstance();
          onChanged();
        } else {
          pidParametersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      public abb.egmri.Egmri.EgmriPIDParameters.Builder getPidParametersBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getPidParametersFieldBuilder().getBuilder();
      }
      public abb.egmri.Egmri.EgmriPIDParametersOrBuilder getPidParametersOrBuilder() {
        if (pidParametersBuilder_ != null) {
          return pidParametersBuilder_.getMessageOrBuilder();
        } else {
          return pidParameters_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          abb.egmri.Egmri.EgmriPIDParameters, abb.egmri.Egmri.EgmriPIDParameters.Builder, abb.egmri.Egmri.EgmriPIDParametersOrBuilder> 
          getPidParametersFieldBuilder() {
        if (pidParametersBuilder_ == null) {
          pidParametersBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              abb.egmri.Egmri.EgmriPIDParameters, abb.egmri.Egmri.EgmriPIDParameters.Builder, abb.egmri.Egmri.EgmriPIDParametersOrBuilder>(
                  pidParameters_,
                  getParentForChildren(),
                  isClean());
          pidParameters_ = null;
        }
        return pidParametersBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:abb.egmri.EgmriSensor)
    }
    
    static {
      defaultInstance = new EgmriSensor(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:abb.egmri.EgmriSensor)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriHeader_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriHeader_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriCartesian_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriCartesian_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriQuaternion_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriQuaternion_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriPose_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriPose_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriJoints_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriJoints_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriJointSpace_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriJointSpace_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriFeedback_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriFeedback_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriPlanned_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriPlanned_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriPIDParameters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriPIDParameters_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriMotorState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriMotorState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriMCIState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriMCIState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriRapidCtrlExecState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriRapidCtrlExecState_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriTestSignals_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriTestSignals_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriRobot_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriRobot_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_abb_egmri_EgmriSensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_abb_egmri_EgmriSensor_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013egmri.proto\022\tabb.egmri\"\323\001\n\013EgmriHeader" +
      "\022\r\n\005seqno\030\001 \001(\r\022\n\n\002tm\030\002 \001(\r\022D\n\005mtype\030\003 \001" +
      "(\0162\".abb.egmri.EgmriHeader.MessageType:\021" +
      "MSGTYPE_UNDEFINED\"c\n\013MessageType\022\025\n\021MSGT" +
      "YPE_UNDEFINED\020\000\022\023\n\017MSGTYPE_COMMAND\020\001\022\020\n\014" +
      "MSGTYPE_DATA\020\002\022\026\n\022MSGTYPE_CORRECTION\020\003\"1" +
      "\n\016EgmriCartesian\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t" +
      "\n\001z\030\003 \002(\002\"A\n\017EgmriQuaternion\022\n\n\002u0\030\001 \002(\002" +
      "\022\n\n\002u1\030\002 \002(\002\022\n\n\002u2\030\003 \002(\002\022\n\n\002u3\030\004 \002(\002\"i\n\t" +
      "EgmriPose\022+\n\010position\030\001 \001(\0132\031.abb.egmri.",
      "EgmriCartesian\022/\n\013orientation\030\002 \001(\0132\032.ab" +
      "b.egmri.EgmriQuaternion\"\035\n\013EgmriJoints\022\016" +
      "\n\006joints\030\001 \003(\002\"i\n\017EgmriJointSpace\022&\n\006joi" +
      "nts\030\001 \001(\0132\026.abb.egmri.EgmriJoints\022.\n\016ext" +
      "ernalJoints\030\002 \001(\0132\026.abb.egmri.EgmriJoint" +
      "s\"\320\001\n\rEgmriFeedback\022+\n\rcartesianPose\030\001 \001" +
      "(\0132\024.abb.egmri.EgmriPose\0221\n\rjointPositio" +
      "n\030\002 \001(\0132\032.abb.egmri.EgmriJointSpace\022.\n\nj" +
      "ointSpeed\030\003 \001(\0132\032.abb.egmri.EgmriJointSp" +
      "ace\022/\n\013jointTorque\030\004 \001(\0132\032.abb.egmri.Egm",
      "riJointSpace\"\236\001\n\014EgmriPlanned\022+\n\rcartesi" +
      "anPose\030\001 \001(\0132\024.abb.egmri.EgmriPose\0221\n\rjo" +
      "intPosition\030\002 \001(\0132\032.abb.egmri.EgmriJoint" +
      "Space\022.\n\njointSpeed\030\003 \001(\0132\032.abb.egmri.Eg" +
      "mriJointSpace\"\214\001\n\022EgmriPIDParameters\022&\n\002" +
      "kp\030\001 \001(\0132\032.abb.egmri.EgmriJointSpace\022&\n\002" +
      "kv\030\002 \001(\0132\032.abb.egmri.EgmriJointSpace\022&\n\002" +
      "ki\030\003 \001(\0132\032.abb.egmri.EgmriJointSpace\"\222\001\n" +
      "\017EgmriMotorState\0228\n\005state\030\001 \002(\0162).abb.eg" +
      "mri.EgmriMotorState.MotorStateType\"E\n\016Mo",
      "torStateType\022\024\n\020MOTORS_UNDEFINED\020\000\022\r\n\tMO" +
      "TORS_ON\020\001\022\016\n\nMOTORS_OFF\020\002\"\250\001\n\rEgmriMCISt" +
      "ate\022C\n\005state\030\001 \002(\0162%.abb.egmri.EgmriMCIS" +
      "tate.MCIStateType:\rMCI_UNDEFINED\"R\n\014MCIS" +
      "tateType\022\021\n\rMCI_UNDEFINED\020\000\022\r\n\tMCI_ERROR" +
      "\020\001\022\017\n\013MCI_STOPPED\020\002\022\017\n\013MCI_RUNNING\020\003\"\311\001\n" +
      "\027EgmriRapidCtrlExecState\022Y\n\005state\030\001 \002(\0162" +
      "9.abb.egmri.EgmriRapidCtrlExecState.Rapi" +
      "dCtrlExecStateType:\017RAPID_UNDEFINED\"S\n\026R" +
      "apidCtrlExecStateType\022\023\n\017RAPID_UNDEFINED",
      "\020\000\022\021\n\rRAPID_STOPPED\020\001\022\021\n\rRAPID_RUNNING\020\002" +
      "\"#\n\020EgmriTestSignals\022\017\n\007signals\030\001 \003(\002\"\245\003" +
      "\n\nEgmriRobot\022&\n\006header\030\001 \001(\0132\026.abb.egmri" +
      ".EgmriHeader\022*\n\010feedback\030\002 \001(\0132\030.abb.egm" +
      "ri.EgmriFeedback\022(\n\007planned\030\003 \001(\0132\027.abb." +
      "egmri.EgmriPlanned\0224\n\rpidParameters\030\004 \001(" +
      "\0132\035.abb.egmri.EgmriPIDParameters\022.\n\nmoto" +
      "rState\030\005 \001(\0132\032.abb.egmri.EgmriMotorState" +
      "\022*\n\010mciState\030\006 \001(\0132\030.abb.egmri.EgmriMCIS" +
      "tate\022\031\n\021mciConvergenceMet\030\007 \001(\010\0220\n\013testS",
      "ignals\030\010 \001(\0132\033.abb.egmri.EgmriTestSignal" +
      "s\022:\n\016rapidExecState\030\t \001(\0132\".abb.egmri.Eg" +
      "mriRapidCtrlExecState\"\217\002\n\013EgmriSensor\022&\n" +
      "\006header\030\001 \001(\0132\026.abb.egmri.EgmriHeader\0226\n" +
      "\022positionReferences\030\002 \001(\0132\032.abb.egmri.Eg" +
      "mriJointSpace\0223\n\017speedReferences\030\003 \001(\0132\032" +
      ".abb.egmri.EgmriJointSpace\0225\n\021torqueFeed" +
      "forward\030\004 \001(\0132\032.abb.egmri.EgmriJointSpac" +
      "e\0224\n\rpidParameters\030\005 \001(\0132\035.abb.egmri.Egm" +
      "riPIDParameters"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_abb_egmri_EgmriHeader_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_abb_egmri_EgmriHeader_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriHeader_descriptor,
              new java.lang.String[] { "Seqno", "Tm", "Mtype", },
              abb.egmri.Egmri.EgmriHeader.class,
              abb.egmri.Egmri.EgmriHeader.Builder.class);
          internal_static_abb_egmri_EgmriCartesian_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_abb_egmri_EgmriCartesian_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriCartesian_descriptor,
              new java.lang.String[] { "X", "Y", "Z", },
              abb.egmri.Egmri.EgmriCartesian.class,
              abb.egmri.Egmri.EgmriCartesian.Builder.class);
          internal_static_abb_egmri_EgmriQuaternion_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_abb_egmri_EgmriQuaternion_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriQuaternion_descriptor,
              new java.lang.String[] { "U0", "U1", "U2", "U3", },
              abb.egmri.Egmri.EgmriQuaternion.class,
              abb.egmri.Egmri.EgmriQuaternion.Builder.class);
          internal_static_abb_egmri_EgmriPose_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_abb_egmri_EgmriPose_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriPose_descriptor,
              new java.lang.String[] { "Position", "Orientation", },
              abb.egmri.Egmri.EgmriPose.class,
              abb.egmri.Egmri.EgmriPose.Builder.class);
          internal_static_abb_egmri_EgmriJoints_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_abb_egmri_EgmriJoints_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriJoints_descriptor,
              new java.lang.String[] { "Joints", },
              abb.egmri.Egmri.EgmriJoints.class,
              abb.egmri.Egmri.EgmriJoints.Builder.class);
          internal_static_abb_egmri_EgmriJointSpace_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_abb_egmri_EgmriJointSpace_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriJointSpace_descriptor,
              new java.lang.String[] { "Joints", "ExternalJoints", },
              abb.egmri.Egmri.EgmriJointSpace.class,
              abb.egmri.Egmri.EgmriJointSpace.Builder.class);
          internal_static_abb_egmri_EgmriFeedback_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_abb_egmri_EgmriFeedback_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriFeedback_descriptor,
              new java.lang.String[] { "CartesianPose", "JointPosition", "JointSpeed", "JointTorque", },
              abb.egmri.Egmri.EgmriFeedback.class,
              abb.egmri.Egmri.EgmriFeedback.Builder.class);
          internal_static_abb_egmri_EgmriPlanned_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_abb_egmri_EgmriPlanned_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriPlanned_descriptor,
              new java.lang.String[] { "CartesianPose", "JointPosition", "JointSpeed", },
              abb.egmri.Egmri.EgmriPlanned.class,
              abb.egmri.Egmri.EgmriPlanned.Builder.class);
          internal_static_abb_egmri_EgmriPIDParameters_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_abb_egmri_EgmriPIDParameters_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriPIDParameters_descriptor,
              new java.lang.String[] { "Kp", "Kv", "Ki", },
              abb.egmri.Egmri.EgmriPIDParameters.class,
              abb.egmri.Egmri.EgmriPIDParameters.Builder.class);
          internal_static_abb_egmri_EgmriMotorState_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_abb_egmri_EgmriMotorState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriMotorState_descriptor,
              new java.lang.String[] { "State", },
              abb.egmri.Egmri.EgmriMotorState.class,
              abb.egmri.Egmri.EgmriMotorState.Builder.class);
          internal_static_abb_egmri_EgmriMCIState_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_abb_egmri_EgmriMCIState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriMCIState_descriptor,
              new java.lang.String[] { "State", },
              abb.egmri.Egmri.EgmriMCIState.class,
              abb.egmri.Egmri.EgmriMCIState.Builder.class);
          internal_static_abb_egmri_EgmriRapidCtrlExecState_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_abb_egmri_EgmriRapidCtrlExecState_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriRapidCtrlExecState_descriptor,
              new java.lang.String[] { "State", },
              abb.egmri.Egmri.EgmriRapidCtrlExecState.class,
              abb.egmri.Egmri.EgmriRapidCtrlExecState.Builder.class);
          internal_static_abb_egmri_EgmriTestSignals_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_abb_egmri_EgmriTestSignals_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriTestSignals_descriptor,
              new java.lang.String[] { "Signals", },
              abb.egmri.Egmri.EgmriTestSignals.class,
              abb.egmri.Egmri.EgmriTestSignals.Builder.class);
          internal_static_abb_egmri_EgmriRobot_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_abb_egmri_EgmriRobot_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriRobot_descriptor,
              new java.lang.String[] { "Header", "Feedback", "Planned", "PidParameters", "MotorState", "MciState", "MciConvergenceMet", "TestSignals", "RapidExecState", },
              abb.egmri.Egmri.EgmriRobot.class,
              abb.egmri.Egmri.EgmriRobot.Builder.class);
          internal_static_abb_egmri_EgmriSensor_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_abb_egmri_EgmriSensor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_abb_egmri_EgmriSensor_descriptor,
              new java.lang.String[] { "Header", "PositionReferences", "SpeedReferences", "TorqueFeedforward", "PidParameters", },
              abb.egmri.Egmri.EgmriSensor.class,
              abb.egmri.Egmri.EgmriSensor.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
